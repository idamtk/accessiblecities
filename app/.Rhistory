icons <- awesomeIcons(
icon = 'fa-solid fa-wheelchair',
library = 'fa',
markerColor = wheels_data$color,
)
leaflet() %>%
addTiles() %>% addProviderTiles("CartoDB.Voyager")%>%
addAwesomeMarkers(data=wheels_data, lat=~lat, lng=~lng,
icon=icons, clusterOptions = markerClusterOptions(),
popup=~oc_formatted)
#, popup = ~placename)
})
selected_place <- reactive({
req(input$place)  # Ensure input is available
wheels_data <- wheels[[input$dataset]]
result <- wheels_data %>% filter(str_detect(oc_formatted, input$place) | str_detect(name, input$place))
resultt <- result[1,]
})
observeEvent(input$button,{
sel_place <- selected_place()
if (nrow(sel_place) == 0){
leafletProxy("map"),
server <- function(input, output, session) {
output$map <- renderLeaflet({
if (input$amenity=="All"){
wheels_data <- wheels[[input$dataset]]
}
else {
wheels_data <- wheels[[input$dataset]]
wheels_data_filtered <- dplyr::filter(wheels_data, wheelchair=="yes" & amenity==input$amenity)
if (nrow(wheels_data_filtered)==0){
shinyalert("No data available!", "There are no accessible locations in this category", type = "error")
}
if (nrow(wheels_data_filtered)>0){
wheels_data<-wheels_data_filtered
}
}
icons <- awesomeIcons(
icon = 'fa-solid fa-wheelchair',
library = 'fa',
markerColor = wheels_data$color,
)
leaflet() %>%
addTiles() %>% addProviderTiles("CartoDB.Voyager")%>%
addAwesomeMarkers(data=wheels_data, lat=~lat, lng=~lng,
icon=icons, clusterOptions = markerClusterOptions(),
popup=~oc_formatted)
#, popup = ~placename)
})
selected_place <- reactive({
req(input$place)  # Ensure input is available
wheels_data <- wheels[[input$dataset]]
result <- wheels_data %>% filter(str_detect(oc_formatted, input$place) | str_detect(name, input$place))
resultt <- result[1,]
})
observeEvent(input$button,{
sel_place <- selected_place()
if (nrow(sel_place) == 0){
leafletProxy("map"),
server <- function(input, output, session) {
output$map <- renderLeaflet({
if (input$amenity=="All"){
wheels_data <- wheels[[input$dataset]]
}
else {
wheels_data <- wheels[[input$dataset]]
wheels_data_filtered <- dplyr::filter(wheels_data, wheelchair=="yes" & amenity==input$amenity)
if (nrow(wheels_data_filtered)==0){
shinyalert("No data available!", "There are no accessible locations in this category", type = "error")
}
if (nrow(wheels_data_filtered)>0){
wheels_data<-wheels_data_filtered
}
}
icons <- awesomeIcons(
icon = 'fa-solid fa-wheelchair',
library = 'fa',
markerColor = wheels_data$color,
)
leaflet() %>%
addTiles() %>% addProviderTiles("CartoDB.Voyager")%>%
addAwesomeMarkers(data=wheels_data, lat=~lat, lng=~lng,
icon=icons, clusterOptions = markerClusterOptions(),
popup=~oc_formatted)
#, popup = ~placename)
})
selected_place <- reactive({
req(input$place)  # Ensure input is available
wheels_data <- wheels[[input$dataset]]
result <- wheels_data %>% filter(str_detect(oc_formatted, input$place) | str_detect(name, input$place))
resultt <- result[1,]
})
observeEvent(input$button,{
sel_place <- selected_place()
if (nrow(sel_place) == 0){
leafletProxy("map")
shinyalert("Could not find location!", "There is no location matching the input", type = "error")
}
if (nrow(sel_place) > 0) {
leafletProxy("map") %>%
setView(lng = sel_place$lng, lat = sel_place$lat, zoom = 2)
}
})
}
shinyApp(ui, server)
server <- function(input, output, session) {
output$map <- renderLeaflet({
if (input$amenity=="All"){
wheels_data <- wheels[[input$dataset]]
}
else {
wheels_data <- wheels[[input$dataset]]
wheels_data_filtered <- dplyr::filter(wheels_data, wheelchair=="yes" & amenity==input$amenity)
if (nrow(wheels_data_filtered)==0){
shinyalert("No data available!", "There are no accessible locations in this category", type = "error")
}
if (nrow(wheels_data_filtered)>0){
wheels_data<-wheels_data_filtered
}
}
icons <- awesomeIcons(
icon = 'fa-solid fa-wheelchair',
library = 'fa',
markerColor = wheels_data$color,
)
leaflet() %>%
addTiles() %>% addProviderTiles("CartoDB.Voyager")%>%
addAwesomeMarkers(data=wheels_data, lat=~lat, lng=~lng,
icon=icons, clusterOptions = markerClusterOptions(),
popup=~oc_formatted)
#, popup = ~placename)
})
selected_place <- reactive({
req(input$place)  # Ensure input is available
wheels_data <- wheels[[input$dataset]]
result <- wheels_data %>% filter(str_detect(oc_formatted, input$place) | str_detect(name, input$place))
resultt <- result[1,]
})
observeEvent(input$action,{
sel_place <- selected_place()
if (nrow(sel_place) == 0){
leafletProxy("map")
shinyalert("Could not find location!", "There is no location matching the input", type = "error")
}
if (nrow(sel_place) > 0) {
leafletProxy("map") %>%
setView(lng = sel_place$lng, lat = sel_place$lat, zoom = 2)
}
})
}
shinyApp(ui, server)
server <- function(input, output, session) {
output$map <- renderLeaflet({
if (input$amenity=="All"){
wheels_data <- wheels[[input$dataset]]
}
else {
wheels_data <- wheels[[input$dataset]]
wheels_data_filtered <- dplyr::filter(wheels_data, wheelchair=="yes" & amenity==input$amenity)
if (nrow(wheels_data_filtered)==0){
shinyalert("No data available!", "There are no accessible locations in this category", type = "error")
}
if (nrow(wheels_data_filtered)>0){
wheels_data<-wheels_data_filtered
}
}
icons <- awesomeIcons(
icon = 'fa-solid fa-wheelchair',
library = 'fa',
markerColor = wheels_data$color,
)
leaflet() %>%
addTiles() %>% addProviderTiles("CartoDB.Voyager")%>%
addAwesomeMarkers(data=wheels_data, lat=~lat, lng=~lng,
icon=icons, clusterOptions = markerClusterOptions(),
popup=~oc_formatted)
#, popup = ~placename)
})
selected_place <- reactive({
req(input$place)  # Ensure input is available
wheels_data <- wheels[[input$dataset]]
result <- wheels_data %>% filter(str_detect(oc_formatted, input$place) | str_detect(name, input$place))
resultt <- result[1,]
resultt
})
observeEvent(input$action,{
sel_place <- selected_place()
if (nrow(sel_place) == 0){
leafletProxy("map")
shinyalert("Could not find location!", "There is no location matching the input", type = "error")
}
if (nrow(sel_place) > 0) {
leafletProxy("map") %>%
setView(lng = sel_place$lng, lat = sel_place$lat, zoom = 2)
}
})
}
shinyApp(ui, server)
server <- function(input, output, session) {
output$map <- renderLeaflet({
if (input$amenity=="All"){
wheels_data <- wheels[[input$dataset]]
}
else {
wheels_data <- wheels[[input$dataset]]
wheels_data_filtered <- dplyr::filter(wheels_data, wheelchair=="yes" & amenity==input$amenity)
if (nrow(wheels_data_filtered)==0){
shinyalert("No data available!", "There are no accessible locations in this category", type = "error")
}
if (nrow(wheels_data_filtered)>0){
wheels_data<-wheels_data_filtered
}
}
icons <- awesomeIcons(
icon = 'fa-solid fa-wheelchair',
library = 'fa',
markerColor = wheels_data$color,
)
leaflet() %>%
addTiles() %>% addProviderTiles("CartoDB.Voyager")%>%
addAwesomeMarkers(data=wheels_data, lat=~lat, lng=~lng,
icon=icons, clusterOptions = markerClusterOptions(),
popup=~oc_formatted)
#, popup = ~placename)
})
selected_place <- reactive({
req(input$place)  # Ensure input is available
wheels_data <- wheels[[input$dataset]]
result <- wheels_data %>% filter(str_detect(oc_formatted, input$place) | str_detect(name, input$place))
result
})
observeEvent(input$action,{
sel_place <- selected_place()
if (nrow(sel_place) == 0){
leafletProxy("map")
shinyalert("Could not find location!", "There is no location matching the input", type = "error")
}
if (nrow(sel_place) > 0) {
result <- sel_place[1,]
leafletProxy("map") %>%
setView(lng = result$lng, lat = result$lat, zoom = 2)
}
})
}
shinyApp(ui, server)
server <- function(input, output, session) {
output$map <- renderLeaflet({
if (input$amenity=="All"){
wheels_data <- wheels[[input$dataset]]
}
else {
wheels_data <- wheels[[input$dataset]]
wheels_data_filtered <- dplyr::filter(wheels_data, wheelchair=="yes" & amenity==input$amenity)
if (nrow(wheels_data_filtered)==0){
shinyalert("No data available!", "There are no accessible locations in this category", type = "error")
}
if (nrow(wheels_data_filtered)>0){
wheels_data<-wheels_data_filtered
}
}
icons <- awesomeIcons(
icon = 'fa-solid fa-wheelchair',
library = 'fa',
markerColor = wheels_data$color,
)
leaflet() %>%
addTiles() %>% addProviderTiles("CartoDB.Voyager")%>%
addAwesomeMarkers(data=wheels_data, lat=~lat, lng=~lng,
icon=icons, clusterOptions = markerClusterOptions(),
popup=~oc_formatted)
#, popup = ~placename)
})
selected_place <- reactive({
req(input$place)  # Ensure input is available
wheels_data <- wheels[[input$dataset]]
result <- wheels_data %>% filter(str_detect(oc_formatted, input$place))
result
})
observeEvent(input$action,{
sel_place <- selected_place()
if (nrow(sel_place) == 0){
leafletProxy("map")
shinyalert("Could not find location!", "There is no location matching the input", type = "error")
}
if (nrow(sel_place) > 0) {
result <- sel_place[1,]
leafletProxy("map") %>%
setView(lng = result$lng, lat = result$lat, zoom = 2)
}
})
}
shinyApp(ui, server)
server <- function(input, output, session) {
output$map <- renderLeaflet({
if (input$amenity=="All"){
wheels_data <- wheels[[input$dataset]]
}
else {
wheels_data <- wheels[[input$dataset]]
wheels_data_filtered <- dplyr::filter(wheels_data, wheelchair=="yes" & amenity==input$amenity)
if (nrow(wheels_data_filtered)==0){
shinyalert("No data available!", "There are no accessible locations in this category", type = "error")
}
if (nrow(wheels_data_filtered)>0){
wheels_data<-wheels_data_filtered
}
}
icons <- awesomeIcons(
icon = 'fa-solid fa-wheelchair',
library = 'fa',
markerColor = wheels_data$color,
)
leaflet() %>%
addTiles() %>% addProviderTiles("CartoDB.Voyager")%>%
addAwesomeMarkers(data=wheels_data, lat=~lat, lng=~lng,
icon=icons, clusterOptions = markerClusterOptions(),
popup=~oc_formatted)
#, popup = ~placename)
})
selected_place <- reactive({
req(input$place)  # Ensure input is available
wheels_data <- wheels[[input$dataset]]
result <- grepl(input$place,wheels_data$oc_formatted)
result
})
observeEvent(input$action,{
sel_place <- selected_place()
if (nrow(sel_place) == 0){
leafletProxy("map")
shinyalert("Could not find location!", "There is no location matching the input", type = "error")
}
if (nrow(sel_place) > 0) {
result <- sel_place[1,]
leafletProxy("map") %>%
setView(lng = result$lng, lat = result$lat, zoom = 2)
}
})
}
shinyApp(ui, server)
server <- function(input, output, session) {
output$map <- renderLeaflet({
if (input$amenity=="All"){
wheels_data <- wheels[[input$dataset]]
}
else {
wheels_data <- wheels[[input$dataset]]
wheels_data_filtered <- dplyr::filter(wheels_data, wheelchair=="yes" & amenity==input$amenity)
if (nrow(wheels_data_filtered)==0){
shinyalert("No data available!", "There are no accessible locations in this category", type = "error")
}
if (nrow(wheels_data_filtered)>0){
wheels_data<-wheels_data_filtered
}
}
icons <- awesomeIcons(
icon = 'fa-solid fa-wheelchair',
library = 'fa',
markerColor = wheels_data$color,
)
leaflet() %>%
addTiles() %>% addProviderTiles("CartoDB.Voyager")%>%
addAwesomeMarkers(data=wheels_data, lat=~lat, lng=~lng,
icon=icons, clusterOptions = markerClusterOptions(),
popup=~oc_formatted)
#, popup = ~placename)
})
selected_place <- reactive({
req(input$place)  # Ensure input is available
wheels_data <- wheels[[input$dataset]]
result <- grepl(input$place,wheels_data$oc_formatted)
result
})
observeEvent(input$action,{
sel_place <- selected_place()
if (is.null(sel_place)){
leafletProxy("map")
shinyalert("Could not find location!", "There is no location matching the input", type = "error")
}
if (nrow(sel_place) > 0) {
result <- sel_place[1,]
leafletProxy("map") %>%
setView(lng = result$lng, lat = result$lat, zoom = 2)
}
})
}
shinyApp(ui, server)
server <- function(input, output, session) {
output$map <- renderLeaflet({
if (input$amenity=="All"){
wheels_data <- wheels[[input$dataset]]
}
else {
wheels_data <- wheels[[input$dataset]]
wheels_data_filtered <- dplyr::filter(wheels_data, wheelchair=="yes" & amenity==input$amenity)
if (nrow(wheels_data_filtered)==0){
shinyalert("No data available!", "There are no accessible locations in this category", type = "error")
}
if (nrow(wheels_data_filtered)>0){
wheels_data<-wheels_data_filtered
}
}
icons <- awesomeIcons(
icon = 'fa-solid fa-wheelchair',
library = 'fa',
markerColor = wheels_data$color,
)
leaflet() %>%
addTiles() %>% addProviderTiles("CartoDB.Voyager")%>%
addAwesomeMarkers(data=wheels_data, lat=~lat, lng=~lng,
icon=icons, clusterOptions = markerClusterOptions(),
popup=~oc_formatted)
#, popup = ~placename)
})
selected_place <- reactive({
req(input$place)  # Ensure input is available
wheels_data <- wheels[[input$dataset]]
result <- wheels_data %>% filter(grepl(input$place, oc_formatted))grepl(input$place,wheels_data$oc_formatted)
server <- function(input, output, session) {
output$map <- renderLeaflet({
if (input$amenity=="All"){
wheels_data <- wheels[[input$dataset]]
}
else {
wheels_data <- wheels[[input$dataset]]
wheels_data_filtered <- dplyr::filter(wheels_data, wheelchair=="yes" & amenity==input$amenity)
if (nrow(wheels_data_filtered)==0){
shinyalert("No data available!", "There are no accessible locations in this category", type = "error")
}
if (nrow(wheels_data_filtered)>0){
wheels_data<-wheels_data_filtered
}
}
icons <- awesomeIcons(
icon = 'fa-solid fa-wheelchair',
library = 'fa',
markerColor = wheels_data$color,
)
leaflet() %>%
addTiles() %>% addProviderTiles("CartoDB.Voyager")%>%
addAwesomeMarkers(data=wheels_data, lat=~lat, lng=~lng,
icon=icons, clusterOptions = markerClusterOptions(),
popup=~oc_formatted)
#, popup = ~placename)
})
selected_place <- reactive({
req(input$place)  # Ensure input is available
wheels_data <- wheels[[input$dataset]]
result <- wheels_data %>% filter(grepl(input$place, oc_formatted))
result
})
observeEvent(input$action,{
sel_place <- selected_place()
if (is.null(sel_place)){
leafletProxy("map")
shinyalert("Could not find location!", "There is no location matching the input", type = "error")
}
if (nrow(sel_place) > 0) {
result <- sel_place[1,]
leafletProxy("map") %>%
setView(lng = result$lng, lat = result$lat, zoom = 2)
}
})
}
shinyApp(ui, server)
server <- function(input, output, session) {
output$map <- renderLeaflet({
if (input$amenity=="All"){
wheels_data <- wheels[[input$dataset]]
}
else {
wheels_data <- wheels[[input$dataset]]
wheels_data_filtered <- dplyr::filter(wheels_data, wheelchair=="yes" & amenity==input$amenity)
if (nrow(wheels_data_filtered)==0){
shinyalert("No data available!", "There are no accessible locations in this category", type = "error")
}
if (nrow(wheels_data_filtered)>0){
wheels_data<-wheels_data_filtered
}
}
icons <- awesomeIcons(
icon = 'fa-solid fa-wheelchair',
library = 'fa',
markerColor = wheels_data$color,
)
leaflet() %>%
addTiles() %>% addProviderTiles("CartoDB.Voyager")%>%
addAwesomeMarkers(data=wheels_data, lat=~lat, lng=~lng,
icon=icons, clusterOptions = markerClusterOptions(),
popup=~oc_formatted)
#, popup = ~placename)
})
selected_place <- reactive({
req(input$place)  # Ensure input is available
wheels_data <- wheels[[input$dataset]]
result <- wheels_data %>% filter(grepl(input$place, oc_formatted))
print(result)
result
})
observeEvent(input$action,{
sel_place <- selected_place()
if (is.null(sel_place)){
leafletProxy("map")
shinyalert("Could not find location!", "There is no location matching the input", type = "error")
}
if (nrow(sel_place) > 0) {
result <- sel_place[1,]
leafletProxy("map") %>%
setView(lng = result$lng, lat = result$lat, zoom = 2)
}
})
}
shinyApp(ui, server)
