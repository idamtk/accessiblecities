})
observeEvent(input$ham, {
sel_metrics$data <- c(sel_metrics$data, "Hamburg")
})
plot_data<- reactive({ dplyr::filter(metrics, X %in% sel_metrics$data)})
output$ratio <- renderPlot({
if (!is.null(plot_data())) {
barplot(plot_data()$ratio, names.arg = plot_data()$X,
ylab = "Procentdel tilgængelige steder", col = "#009CDE", ylim = c(0, max(metrics$ratio)))
} else {
}
})
output$distance <- renderPlot({
if (!is.null(plot_data())) {
barplot(plot_data()$average_distance, names.arg = plot_data()$X,
ylab = "Afstand til nærmeste tilgængelige sted i meter", col = "#009CDE", ylim = c(0, max(metrics$average_distance)))
} else {
}
})
output$density <- renderPlot({
if (!is.null(plot_data())) {
barplot(plot_data()$density, names.arg = plot_data()$X,
ylab = "Tilgængelige steder pr. km2", col = "#009CDE")
} else {
}
})
}
shinyApp(ui, server)
server <- function(input, output, session) {
wheels <- reactiveValues(data = wheel[["aar"]])
observeEvent(input$aar, {
wheels$data <- wheel[["aar"]]
})
observeEvent(input$cph, {
wheels$data <- wheel[["cph"]]
})
output$map <- renderLeaflet({
if (input$amenity=="All"){
wheels_data <- wheels$data
}
else {
wheels_data <- wheels$data
wheels_data_filtered <- dplyr::filter(wheels_data, wheelchair=="yes" & amenity==input$amenity)
if (nrow(wheels_data_filtered)==0){
shinyalert("No data available!", "There are no accessible locations in this category", type = "error")
}
if (nrow(wheels_data_filtered)>0){
wheels_data<-wheels_data_filtered
}
}
icons <- awesomeIcons(
icon = 'fa-solid fa-wheelchair',
library = 'fa',
markerColor = wheels_data$color,
)
leaflet() %>%
addTiles() %>% addProviderTiles("CartoDB.Voyager")%>%
addAwesomeMarkers(data=wheels_data, lat=~lat, lng=~lng,
icon=icons, clusterOptions = markerClusterOptions(spiderfyOnMaxZoom=FALSE, disableClusteringAtZoom=17),
popup=~paste("<div style='text-align:center;'><b>",name,"</b> <br>",oc_formatted,"</div>"))
#, popup = ~placename)
})
selected_place <- reactive({
req(input$place)  # Ensure input is available
wheels_data <- wheels$data
wheels_data %>% dplyr::filter(name == input$place) ## add address if poss
})
observe({
sel_place <- selected_place()
if (nrow(sel_place) ==1) {
leafletProxy("map") %>%
setView(lng = sel_place$lng, lat = sel_place$lat, zoom = 50)
}
if (nrow(sel_place) > 1) {
result <- sel_place[1,]
leafletProxy("map") %>%
setView(lng = result$lng, lat = result$lat, zoom = 50)
}
if (is.null(sel_place)) {
shinyalert("No data available!", "There are no accessible locations in this category in this city", type = "error")
}
})
sel_metrics <- reactiveValues( data=c())
observeEvent(input$aar2, {
sel_metrics$data <- c(sel_metrics$data, "Aarhus")
})
observeEvent(input$cph2, {
sel_metrics$data <- c(sel_metrics$data, "København")
})
observeEvent(input$ber, {
sel_metrics$data <- c(sel_metrics$data, "Berlin")
})
observeEvent(input$bre, {
sel_metrics$data <- c(sel_metrics$data, "Bremen")
})
observeEvent(input$ham, {
sel_metrics$data <- c(sel_metrics$data, "Hamburg")
})
plot_data<- reactive({ dplyr::filter(metrics, X %in% sel_metrics$data)})
output$ratio <- renderPlot({
if (!is.null(plot_data())) {
barplot(plot_data()$ratio, names.arg = plot_data()$X,
ylab = "Procentdel tilgængelige steder", col = "#009CDE", ylim = c(0, max(metrics$ratio)))
} else {
}
})
output$distance <- renderPlot({
if (!is.null(plot_data())) {
barplot(plot_data()$average_distance, names.arg = plot_data()$X,
ylab = "Afstand til nærmeste tilgængelige sted i meter", col = "#009CDE", ylim = c(0, max(metrics$average_distance)))
} else {
}
})
output$density <- renderPlot({
if (!is.null(plot_data())) {
barplot(plot_data()$density, names.arg = plot_data()$X,
ylab = "Tilgængelige steder pr. km2", col = "#009CDE", ylim = c(0, max(metrics$density)))
} else {
}
})
}
shinyApp(ui, server)
server <- function(input, output, session) {
wheels <- reactiveValues(data = wheel[["aar"]])
observeEvent(input$aar, {
wheels$data <- wheel[["aar"]]
})
observeEvent(input$cph, {
wheels$data <- wheel[["cph"]]
})
output$map <- renderLeaflet({
if (input$amenity=="All"){
wheels_data <- wheels$data
}
else {
wheels_data <- wheels$data
wheels_data_filtered <- dplyr::filter(wheels_data, wheelchair=="yes" & amenity==input$amenity)
if (nrow(wheels_data_filtered)==0){
shinyalert("No data available!", "There are no accessible locations in this category", type = "error")
}
if (nrow(wheels_data_filtered)>0){
wheels_data<-wheels_data_filtered
}
}
icons <- awesomeIcons(
icon = 'fa-solid fa-wheelchair',
library = 'fa',
markerColor = wheels_data$color,
)
leaflet() %>%
addTiles() %>% addProviderTiles("CartoDB.Voyager")%>%
addAwesomeMarkers(data=wheels_data, lat=~lat, lng=~lng,
icon=icons, clusterOptions = markerClusterOptions(spiderfyOnMaxZoom=FALSE, disableClusteringAtZoom=17),
popup=~paste("<div style='text-align:center;'><b>",name,"</b> <br>",oc_formatted,"</div>"))
#, popup = ~placename)
})
selected_place <- reactive({
req(input$place)  # Ensure input is available
wheels_data <- wheels$data
wheels_data %>% dplyr::filter(name == input$place) ## add address if poss
})
observe({
sel_place <- selected_place()
if (nrow(sel_place) ==1) {
leafletProxy("map") %>%
setView(lng = sel_place$lng, lat = sel_place$lat, zoom = 50)
}
if (nrow(sel_place) > 1) {
result <- sel_place[1,]
leafletProxy("map") %>%
setView(lng = result$lng, lat = result$lat, zoom = 50)
}
if (is.null(sel_place)) {
shinyalert("No data available!", "There are no accessible locations in this category in this city", type = "error")
}
})
sel_metrics <- reactiveValues( data=c())
observeEvent(input$aar2, {
sel_metrics$data <- c(sel_metrics$data, "Aarhus")
})
observeEvent(input$cph2, {
sel_metrics$data <- c(sel_metrics$data, "København")
})
observeEvent(input$ber, {
sel_metrics$data <- c(sel_metrics$data, "Berlin")
})
observeEvent(input$bre, {
sel_metrics$data <- c(sel_metrics$data, "Bremen")
})
observeEvent(input$ham, {
sel_metrics$data <- c(sel_metrics$data, "Hamburg")
})
observeEvent(input$ham, {
sel_metrics$data <- c()
})
plot_data<- reactive({ dplyr::filter(metrics, X %in% sel_metrics$data)})
output$ratio <- renderPlot({
if (!is.null(plot_data())) {
barplot(plot_data()$ratio, names.arg = plot_data()$X,
ylab = "Procentdel tilgængelige steder", col = "#009CDE", ylim = c(0, max(metrics$ratio)))
} else {
}
})
output$distance <- renderPlot({
if (!is.null(plot_data())) {
barplot(plot_data()$average_distance, names.arg = plot_data()$X,
ylab = "Afstand til nærmeste tilgængelige sted i meter", col = "#009CDE", ylim = c(0, max(metrics$average_distance)))
} else {
}
})
output$density <- renderPlot({
if (!is.null(plot_data())) {
barplot(plot_data()$density, names.arg = plot_data()$X,
ylab = "Tilgængelige steder pr. km2", col = "#009CDE", ylim = c(0, max(metrics$density)))
} else {
}
})
}
shinyApp(ui, server)
server <- function(input, output, session) {
wheels <- reactiveValues(data = wheel[["aar"]])
observeEvent(input$aar, {
wheels$data <- wheel[["aar"]]
})
observeEvent(input$cph, {
wheels$data <- wheel[["cph"]]
})
output$map <- renderLeaflet({
if (input$amenity=="All"){
wheels_data <- wheels$data
}
else {
wheels_data <- wheels$data
wheels_data_filtered <- dplyr::filter(wheels_data, wheelchair=="yes" & amenity==input$amenity)
if (nrow(wheels_data_filtered)==0){
shinyalert("No data available!", "There are no accessible locations in this category", type = "error")
}
if (nrow(wheels_data_filtered)>0){
wheels_data<-wheels_data_filtered
}
}
icons <- awesomeIcons(
icon = 'fa-solid fa-wheelchair',
library = 'fa',
markerColor = wheels_data$color,
)
leaflet() %>%
addTiles() %>% addProviderTiles("CartoDB.Voyager")%>%
addAwesomeMarkers(data=wheels_data, lat=~lat, lng=~lng,
icon=icons, clusterOptions = markerClusterOptions(spiderfyOnMaxZoom=FALSE, disableClusteringAtZoom=17),
popup=~paste("<div style='text-align:center;'><b>",name,"</b> <br>",oc_formatted,"</div>"))
#, popup = ~placename)
})
selected_place <- reactive({
req(input$place)  # Ensure input is available
wheels_data <- wheels$data
wheels_data %>% dplyr::filter(name == input$place) ## add address if poss
})
observe({
sel_place <- selected_place()
if (nrow(sel_place) ==1) {
leafletProxy("map") %>%
setView(lng = sel_place$lng, lat = sel_place$lat, zoom = 50)
}
if (nrow(sel_place) > 1) {
result <- sel_place[1,]
leafletProxy("map") %>%
setView(lng = result$lng, lat = result$lat, zoom = 50)
}
if (is.null(sel_place)) {
shinyalert("No data available!", "There are no accessible locations in this category in this city", type = "error")
}
})
sel_metrics <- reactiveValues( data=c())
observeEvent(input$aar2, {
sel_metrics$data <- c(sel_metrics$data, "Aarhus")
})
observeEvent(input$cph2, {
sel_metrics$data <- c(sel_metrics$data, "København")
})
observeEvent(input$ber, {
sel_metrics$data <- c(sel_metrics$data, "Berlin")
})
observeEvent(input$bre, {
sel_metrics$data <- c(sel_metrics$data, "Bremen")
})
observeEvent(input$ham, {
sel_metrics$data <- c(sel_metrics$data, "Hamburg")
})
observeEvent(input$clear, {
sel_metrics$data <- c()
})
plot_data<- reactive({ dplyr::filter(metrics, X %in% sel_metrics$data)})
output$ratio <- renderPlot({
if (!is.null(plot_data())) {
barplot(plot_data()$ratio, names.arg = plot_data()$X,
ylab = "Procentdel tilgængelige steder", col = "#009CDE", ylim = c(0, max(metrics$ratio)))
} else {
}
})
output$distance <- renderPlot({
if (!is.null(plot_data())) {
barplot(plot_data()$average_distance, names.arg = plot_data()$X,
ylab = "Afstand til nærmeste tilgængelige sted i meter", col = "#009CDE", ylim = c(0, max(metrics$average_distance)))
} else {
}
})
output$density <- renderPlot({
if (!is.null(plot_data())) {
barplot(plot_data()$density, names.arg = plot_data()$X,
ylab = "Tilgængelige steder pr. km2", col = "#009CDE", ylim = c(0, max(metrics$density)))
} else {
}
})
}
shinyApp(ui, server)
server <- function(input, output, session) {
wheels <- reactiveValues(data = wheel[["aar"]])
observeEvent(input$aar, {
wheels$data <- wheel[["aar"]]
})
observeEvent(input$cph, {
wheels$data <- wheel[["cph"]]
})
output$map <- renderLeaflet({
if (input$amenity=="All"){
wheels_data <- wheels$data
}
else {
wheels_data <- wheels$data
wheels_data_filtered <- dplyr::filter(wheels_data, wheelchair=="yes" & amenity==input$amenity)
if (nrow(wheels_data_filtered)==0){
shinyalert("No data available!", "There are no accessible locations in this category", type = "error")
}
if (nrow(wheels_data_filtered)>0){
wheels_data<-wheels_data_filtered
}
}
icons <- awesomeIcons(
icon = 'fa-solid fa-wheelchair',
library = 'fa',
markerColor = wheels_data$color,
)
leaflet() %>%
addTiles() %>% addProviderTiles("CartoDB.Voyager")%>%
addAwesomeMarkers(data=wheels_data, lat=~lat, lng=~lng,
icon=icons, clusterOptions = markerClusterOptions(spiderfyOnMaxZoom=FALSE, disableClusteringAtZoom=17),
popup=~paste("<div style='text-align:center;'><b>",name,"</b> <br>",oc_formatted,"</div>"))
#, popup = ~placename)
})
selected_place <- reactive({
req(input$place)  # Ensure input is available
wheels_data <- wheels$data
wheels_data %>% dplyr::filter(name == input$place) ## add address if poss
})
observe({
sel_place <- selected_place()
if (nrow(sel_place) ==1) {
leafletProxy("map") %>%
setView(lng = sel_place$lng, lat = sel_place$lat, zoom = 50)
}
if (nrow(sel_place) > 1) {
result <- sel_place[1,]
leafletProxy("map") %>%
setView(lng = result$lng, lat = result$lat, zoom = 50)
}
if (is.null(sel_place)) {
shinyalert("No data available!", "There are no accessible locations in this category in this city", type = "error")
}
})
sel_metrics <- reactiveValues( data=c())
observeEvent(input$aar2, {
sel_metrics$data <- c(sel_metrics$data, "Aarhus")
})
observeEvent(input$cph2, {
sel_metrics$data <- c(sel_metrics$data, "København")
})
observeEvent(input$ber, {
sel_metrics$data <- c(sel_metrics$data, "Berlin")
})
observeEvent(input$bre, {
sel_metrics$data <- c(sel_metrics$data, "Bremen")
})
observeEvent(input$ham, {
sel_metrics$data <- c(sel_metrics$data, "Hamburg")
})
observeEvent(input$clear, {
sel_metrics$data <- c()
})
plot_data<- reactive({ dplyr::filter(metrics, X %in% sel_metrics$data)})
output$ratio <- renderPlot({
if (!is.null(plot_data())) {
barplot(plot_data()$ratio, names.arg = plot_data()$X,
ylab = "Procentdel tilgængelige steder", col = "#009CDE", ylim = c(0, max(metrics$ratio)))
} else {
}
})
output$distance <- renderPlot({
if (!is.null(plot_data())) {
barplot(plot_data()$average_distance, names.arg = plot_data()$X,
ylab = "Afstand til nærmeste tilgængelige sted i meter", col = "#009CDE", ylim = c(0, max(metrics$average_distance)))
} else {
}
})
output$density <- renderPlot({
if (!is.null(plot_data())) {
barplot(plot_data()$density, names.arg = plot_data()$X,
ylab = "Tilgængelige steder pr. km2", col = "#009CDE", ylim = c(0, max(metrics$density)))
} else {
plot(0, type = "n", axes = FALSE, xlab = "", ylab = "")
}
})
}
shinyApp(ui, server)
server <- function(input, output, session) {
wheels <- reactiveValues(data = wheel[["aar"]])
observeEvent(input$aar, {
wheels$data <- wheel[["aar"]]
})
observeEvent(input$cph, {
wheels$data <- wheel[["cph"]]
})
output$map <- renderLeaflet({
if (input$amenity=="All"){
wheels_data <- wheels$data
}
else {
wheels_data <- wheels$data
wheels_data_filtered <- dplyr::filter(wheels_data, wheelchair=="yes" & amenity==input$amenity)
if (nrow(wheels_data_filtered)==0){
shinyalert("No data available!", "There are no accessible locations in this category", type = "error")
}
if (nrow(wheels_data_filtered)>0){
wheels_data<-wheels_data_filtered
}
}
icons <- awesomeIcons(
icon = 'fa-solid fa-wheelchair',
library = 'fa',
markerColor = wheels_data$color,
)
leaflet() %>%
addTiles() %>% addProviderTiles("CartoDB.Voyager")%>%
addAwesomeMarkers(data=wheels_data, lat=~lat, lng=~lng,
icon=icons, clusterOptions = markerClusterOptions(spiderfyOnMaxZoom=FALSE, disableClusteringAtZoom=17),
popup=~paste("<div style='text-align:center;'><b>",name,"</b> <br>",oc_formatted,"</div>"))
#, popup = ~placename)
})
selected_place <- reactive({
req(input$place)  # Ensure input is available
wheels_data <- wheels$data
wheels_data %>% dplyr::filter(name == input$place) ## add address if poss
})
observe({
sel_place <- selected_place()
if (nrow(sel_place) ==1) {
leafletProxy("map") %>%
setView(lng = sel_place$lng, lat = sel_place$lat, zoom = 50)
}
if (nrow(sel_place) > 1) {
result <- sel_place[1,]
leafletProxy("map") %>%
setView(lng = result$lng, lat = result$lat, zoom = 50)
}
if (is.null(sel_place)) {
shinyalert("No data available!", "There are no accessible locations in this category in this city", type = "error")
}
})
sel_metrics <- reactiveValues( data=c())
observeEvent(input$aar2, {
sel_metrics$data <- c(sel_metrics$data, "Aarhus")
})
observeEvent(input$cph2, {
sel_metrics$data <- c(sel_metrics$data, "København")
})
observeEvent(input$ber, {
sel_metrics$data <- c(sel_metrics$data, "Berlin")
})
observeEvent(input$bre, {
sel_metrics$data <- c(sel_metrics$data, "Bremen")
})
observeEvent(input$ham, {
sel_metrics$data <- c(sel_metrics$data, "Hamburg")
})
observeEvent(input$clear, {
sel_metrics$data <- c()
})
plot_data<- reactive({ dplyr::filter(metrics, X %in% sel_metrics$data)})
output$ratio <- renderPlot({
if (nrow(plot_data()) > 0) {
barplot(plot_data()$ratio, names.arg = plot_data()$X,
ylab = "Procentdel tilgængelige steder", col = "#009CDE", ylim = c(0, max(metrics$ratio)))
} else {
}
})
output$distance <- renderPlot({
if (nrow(plot_data()) > 0) {
barplot(plot_data()$average_distance, names.arg = plot_data()$X,
ylab = "Afstand til nærmeste tilgængelige sted i meter", col = "#009CDE", ylim = c(0, max(metrics$average_distance)))
} else {
}
})
output$density <- renderPlot({
if (nrow(plot_data()) > 0) {
barplot(plot_data()$density, names.arg = plot_data()$X,
ylab = "Tilgængelige steder pr. km2", col = "#009CDE", ylim = c(0, max(metrics$density)))
} else {
plot(0, type = "n", axes = FALSE, xlab = "", ylab = "")
}
})
}
shinyApp(ui, server)
