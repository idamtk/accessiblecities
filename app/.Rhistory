output$distance <- renderPlot({
if (nrow(plot_data()) > 0) {
barplot(plot_data()$average_distance, names.arg = plot_data()$X,
ylab = "Afstand til nærmeste tilgængelige sted i meter", col = "#009CDE", ylim = c(0, max(metrics$average_distance)))
} else {
}
})
output$density <- renderPlot({
if (nrow(plot_data()) > 0) {
barplot(plot_data()$density, names.arg = plot_data()$X,
ylab = "Tilgængelige steder pr. km2", col = "#009CDE", ylim = c(0, max(metrics$density)))
} else {
plot(0, type = "n", axes = FALSE, xlab = "", ylab = "")
}
})
}
shinyApp(ui, server)
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
wheels_data_aar <- wheels_data_aar   %>%
mutate(label_da = case_when(
wheelchair == "yes" ~ "Tilgængelig",
wheelchair == "limited" ~ "Begrænset tilgængelighed",
wheelchair == "no" ~ "Utilgænglig"
))
View(wheels_data_aar)
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
wheels_data_cph <- wheels_data_cph   %>%
mutate(label_da = case_when(
wheelchair == "yes" ~ "Tilgængelig",
wheelchair == "limited" ~ "Begrænset tilgængelighed",
wheelchair == "no" ~ "Utilgænglig"
))
wheel <- list(cph=wheels_data_cph,aar=wheels_data_aar)
ui <- fluidPage(
theme = bslib::bs_theme(bootswatch = "zephyr"),
tags$head(
# Include FontAwesome library
tags$link(rel = "stylesheet", href = "https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css")
),
tags$head(
tags$style(HTML("
.nav .nav-item .nav-link {
padding-left: 20px;
padding-right: 20px;
text-align: center;
width: 200px;  /* Adjust the width as needed */
}
")),
tags$head(
tags$style(HTML("
.navbar-nav {
display: flex;
justify-content: center;
align-items: center;
margin-left: -100px;
}
"))
),
),
navbarPage("Accessible Cities", id="nav",
tabPanel("  Udforsk  ",
fluidPage(
tags$style(type = "text/css", "#map {height: calc(100vh - 100px) !important;}",),
fluidRow(
# Column with map
column(9,leafletOutput(outputId = "map")),
column(3,
h5("Find tilgængelige steder i:", style = "font-weight: bold;"),
actionButton("aar", "Århus"),
actionButton("cph", "København"),
tags$div(style = "height: 10px;"),
p("Du kan finde kørestolstilgængelige steder ved at udforske på kortet eller bruge søgeværktøjerne nedenfor"),
hr(),
selectInput("amenity", label = "Find tilgængelige steder i denne kategori", choices = categories),
hr(),
textInput("place", label = "Søg på en addresse og find ud af om stedet er tilgængeligt med kørestol",
placeholder = "Indtast en addresse eller et navn på et sted"), actionButton("action", "Søg"),
)))),
tabPanel("Sammenlign",
fluidRow(
h5("Vælg byer og sammenlign deres tilgængelighed", style = "font-weight: bold; text-align:center;"),
p("Her kan du udforske vores sammenligningsværktøj, der sammenligner byers tilgængelighed på baggrund af tre mål: gennemsnitlig afstand mellem tilgængelige lokationer, antal tilgængelige lokationer pr. km2 og andelen af tilgængelige lokationer.", style="text-align:center;"),
div(style = "display: flex; justify-content: center; gap: 10px;",
actionButton("aar2", "   Århus   "),
actionButton("cph2", "   København   "),
actionButton("ber", "   Berlin   "),
actionButton("bre", "   Bremen   "),
actionButton("ham", "   Hamburg   "),
actionButton("clear", "   Fjern alle   "),
),
tags$div(style = "height: 20px;"),
hr()),
fluidRow(
column(4,
p("Gennemsnitlig afstand",style="text-align:center;"),
HTML("<i class='bi bi-arrow-left-right' style='font-size: 50px; color: #009CDE; text-align: center; display: block;'></i>"),
plotOutput("distance")
),
column(4, p("Andel af tilgængelige steder",style="text-align:center;"),
HTML("<i class='bi bi-pie-chart-fill' style='font-size: 50px; color: #009CDE; text-align: center; display: block;'></i>"),
plotOutput("ratio")
),
column(4, p("Tilgængelige steder pr. km2",style="text-align:center;"),
div(style="text-align:center;",
HTML("<i class='bi bi-geo-fill' style='font-size: 50px; color: #009CDE;'></i>"),
HTML("<i class='bi bi-geo-fill' style='font-size: 50px; color: #009CDE;'></i>"),
HTML("<i class='bi bi-geo-fill' style='font-size: 50px; color: #009CDE;'></i>")),
plotOutput("density"))
))
))
server <- function(input, output, session) {
wheels <- reactiveValues(data = wheel[["aar"]])
observeEvent(input$aar, {
wheels$data <- wheel[["aar"]]
})
observeEvent(input$cph, {
wheels$data <- wheel[["cph"]]
})
output$map <- renderLeaflet({
if (input$amenity=="All"){
wheels_data <- wheels$data
}
else {
wheels_data <- wheels$data
wheels_data_filtered <- dplyr::filter(wheels_data, wheelchair=="yes" & amenity==input$amenity)
if (nrow(wheels_data_filtered)==0){
shinyalert("No data available!", "There are no accessible locations in this category", type = "error")
}
if (nrow(wheels_data_filtered)>0){
wheels_data<-wheels_data_filtered
}
}
icons <- awesomeIcons(
icon = 'fa-solid fa-wheelchair',
library = 'fa',
markerColor = wheels_data$color,
)
leaflet() %>%
addTiles() %>% addProviderTiles("CartoDB.Voyager")%>%
addAwesomeMarkers(data=wheels_data, lat=~lat, lng=~lng,
icon=icons, clusterOptions = markerClusterOptions(spiderfyOnMaxZoom=FALSE, disableClusteringAtZoom=17),
popup=~paste("<div style='text-align:center;'><b>",name,"</b> <br>",oc_formatted,"</div>")) %>%
addLegend(colors = unique(wheels_data$color), labels=unique(wheels_data$label_da))
#, popup = ~placename)
})
selected_place <- reactive({
req(input$place)  # Ensure input is available
wheels_data <- wheels$data
wheels_data %>% dplyr::filter(name == input$place) ## add address if poss
})
observe({
sel_place <- selected_place()
if (nrow(sel_place) ==1) {
leafletProxy("map") %>%
setView(lng = sel_place$lng, lat = sel_place$lat, zoom = 50)
}
if (nrow(sel_place) > 1) {
result <- sel_place[1,]
leafletProxy("map") %>%
setView(lng = result$lng, lat = result$lat, zoom = 50)
}
if (is.null(sel_place)) {
shinyalert("No data available!", "There are no accessible locations in this category in this city", type = "error")
}
})
sel_metrics <- reactiveValues( data=c())
observeEvent(input$aar2, {
sel_metrics$data <- c(sel_metrics$data, "Aarhus")
})
observeEvent(input$cph2, {
sel_metrics$data <- c(sel_metrics$data, "København")
})
observeEvent(input$ber, {
sel_metrics$data <- c(sel_metrics$data, "Berlin")
})
observeEvent(input$bre, {
sel_metrics$data <- c(sel_metrics$data, "Bremen")
})
observeEvent(input$ham, {
sel_metrics$data <- c(sel_metrics$data, "Hamburg")
})
observeEvent(input$clear, {
sel_metrics$data <- c()
})
plot_data<- reactive({ dplyr::filter(metrics, X %in% sel_metrics$data)})
output$ratio <- renderPlot({
if (nrow(plot_data()) > 0) {
barplot(plot_data()$ratio, names.arg = plot_data()$X,
ylab = "Procentdel tilgængelige steder", col = "#009CDE", ylim = c(0, max(metrics$ratio)))
} else {
}
})
output$distance <- renderPlot({
if (nrow(plot_data()) > 0) {
barplot(plot_data()$average_distance, names.arg = plot_data()$X,
ylab = "Afstand til nærmeste tilgængelige sted i meter", col = "#009CDE", ylim = c(0, max(metrics$average_distance)))
} else {
}
})
output$density <- renderPlot({
if (nrow(plot_data()) > 0) {
barplot(plot_data()$density, names.arg = plot_data()$X,
ylab = "Tilgængelige steder pr. km2", col = "#009CDE", ylim = c(0, max(metrics$density)))
} else {
plot(0, type = "n", axes = FALSE, xlab = "", ylab = "")
}
})
}
shinyApp(ui, server)
server <- function(input, output, session) {
wheels <- reactiveValues(data = wheel[["aar"]])
observeEvent(input$aar, {
wheels$data <- wheel[["aar"]]
})
observeEvent(input$cph, {
wheels$data <- wheel[["cph"]]
})
output$map <- renderLeaflet({
if (input$amenity=="All"){
wheels_data <- wheels$data
}
else {
wheels_data <- wheels$data
wheels_data_filtered <- dplyr::filter(wheels_data, wheelchair=="yes" & amenity==input$amenity)
if (nrow(wheels_data_filtered)==0){
shinyalert("No data available!", "There are no accessible locations in this category", type = "error")
}
if (nrow(wheels_data_filtered)>0){
wheels_data<-wheels_data_filtered
}
}
icons <- awesomeIcons(
icon = 'fa-solid fa-wheelchair',
library = 'fa',
markerColor = wheels_data$color,
)
leaflet() %>%
addTiles() %>% addProviderTiles("CartoDB.Voyager")%>%
addAwesomeMarkers(data=wheels_data, lat=~lat, lng=~lng,
icon=icons, clusterOptions = markerClusterOptions(spiderfyOnMaxZoom=FALSE, disableClusteringAtZoom=17),
popup=~paste("<div style='text-align:center;'><b>",name,"</b> <br>",oc_formatted,"</div>")) %>%
addLegend(colors = unique(wheels_data$color), labels=unique(wheels_data$label_da), title="Kørestolstilgængelighed for lokationen", opacity=1)
#, popup = ~placename)
})
selected_place <- reactive({
req(input$place)  # Ensure input is available
wheels_data <- wheels$data
wheels_data %>% dplyr::filter(name == input$place) ## add address if poss
})
observe({
sel_place <- selected_place()
if (nrow(sel_place) ==1) {
leafletProxy("map") %>%
setView(lng = sel_place$lng, lat = sel_place$lat, zoom = 50)
}
if (nrow(sel_place) > 1) {
result <- sel_place[1,]
leafletProxy("map") %>%
setView(lng = result$lng, lat = result$lat, zoom = 50)
}
if (is.null(sel_place)) {
shinyalert("No data available!", "There are no accessible locations in this category in this city", type = "error")
}
})
sel_metrics <- reactiveValues( data=c())
observeEvent(input$aar2, {
sel_metrics$data <- c(sel_metrics$data, "Aarhus")
})
observeEvent(input$cph2, {
sel_metrics$data <- c(sel_metrics$data, "København")
})
observeEvent(input$ber, {
sel_metrics$data <- c(sel_metrics$data, "Berlin")
})
observeEvent(input$bre, {
sel_metrics$data <- c(sel_metrics$data, "Bremen")
})
observeEvent(input$ham, {
sel_metrics$data <- c(sel_metrics$data, "Hamburg")
})
observeEvent(input$clear, {
sel_metrics$data <- c()
})
plot_data<- reactive({ dplyr::filter(metrics, X %in% sel_metrics$data)})
output$ratio <- renderPlot({
if (nrow(plot_data()) > 0) {
barplot(plot_data()$ratio, names.arg = plot_data()$X,
ylab = "Procentdel tilgængelige steder", col = "#009CDE", ylim = c(0, max(metrics$ratio)))
} else {
}
})
output$distance <- renderPlot({
if (nrow(plot_data()) > 0) {
barplot(plot_data()$average_distance, names.arg = plot_data()$X,
ylab = "Afstand til nærmeste tilgængelige sted i meter", col = "#009CDE", ylim = c(0, max(metrics$average_distance)))
} else {
}
})
output$density <- renderPlot({
if (nrow(plot_data()) > 0) {
barplot(plot_data()$density, names.arg = plot_data()$X,
ylab = "Tilgængelige steder pr. km2", col = "#009CDE", ylim = c(0, max(metrics$density)))
} else {
plot(0, type = "n", axes = FALSE, xlab = "", ylab = "")
}
})
}
shinyApp(ui, server)
server <- function(input, output, session) {
wheels <- reactiveValues(data = wheel[["aar"]])
observeEvent(input$aar, {
wheels$data <- wheel[["aar"]]
})
observeEvent(input$cph, {
wheels$data <- wheel[["cph"]]
})
output$map <- renderLeaflet({
if (input$amenity=="All"){
wheels_data <- wheels$data
}
else {
wheels_data <- wheels$data
wheels_data_filtered <- dplyr::filter(wheels_data, wheelchair=="yes" & amenity==input$amenity)
if (nrow(wheels_data_filtered)==0){
shinyalert("No data available!", "There are no accessible locations in this category", type = "error")
}
if (nrow(wheels_data_filtered)>0){
wheels_data<-wheels_data_filtered
}
}
icons <- awesomeIcons(
icon = 'fa-solid fa-wheelchair',
library = 'fa',
markerColor = wheels_data$color,
)
leaflet() %>%
addTiles() %>% addProviderTiles("CartoDB.Voyager")%>%
addAwesomeMarkers(data=wheels_data, lat=~lat, lng=~lng,
icon=icons, clusterOptions = markerClusterOptions(spiderfyOnMaxZoom=FALSE, disableClusteringAtZoom=17),
popup=~paste("<div style='text-align:center;'><b>",name,"</b> <br>",oc_formatted,"</div>")) %>%
addLegend(colors = unique(wheels_data$color), labels=unique(wheels_data$label_da), title="Kørestolstilgængelighed <br> for lokationen", opacity=1)
#, popup = ~placename)
})
selected_place <- reactive({
req(input$place)  # Ensure input is available
wheels_data <- wheels$data
wheels_data %>% dplyr::filter(name == input$place) ## add address if poss
})
observe({
sel_place <- selected_place()
if (nrow(sel_place) ==1) {
leafletProxy("map") %>%
setView(lng = sel_place$lng, lat = sel_place$lat, zoom = 50)
}
if (nrow(sel_place) > 1) {
result <- sel_place[1,]
leafletProxy("map") %>%
setView(lng = result$lng, lat = result$lat, zoom = 50)
}
if (is.null(sel_place)) {
shinyalert("No data available!", "There are no accessible locations in this category in this city", type = "error")
}
})
sel_metrics <- reactiveValues( data=c())
observeEvent(input$aar2, {
sel_metrics$data <- c(sel_metrics$data, "Aarhus")
})
observeEvent(input$cph2, {
sel_metrics$data <- c(sel_metrics$data, "København")
})
observeEvent(input$ber, {
sel_metrics$data <- c(sel_metrics$data, "Berlin")
})
observeEvent(input$bre, {
sel_metrics$data <- c(sel_metrics$data, "Bremen")
})
observeEvent(input$ham, {
sel_metrics$data <- c(sel_metrics$data, "Hamburg")
})
observeEvent(input$clear, {
sel_metrics$data <- c()
})
plot_data<- reactive({ dplyr::filter(metrics, X %in% sel_metrics$data)})
output$ratio <- renderPlot({
if (nrow(plot_data()) > 0) {
barplot(plot_data()$ratio, names.arg = plot_data()$X,
ylab = "Procentdel tilgængelige steder", col = "#009CDE", ylim = c(0, max(metrics$ratio)))
} else {
}
})
output$distance <- renderPlot({
if (nrow(plot_data()) > 0) {
barplot(plot_data()$average_distance, names.arg = plot_data()$X,
ylab = "Afstand til nærmeste tilgængelige sted i meter", col = "#009CDE", ylim = c(0, max(metrics$average_distance)))
} else {
}
})
output$density <- renderPlot({
if (nrow(plot_data()) > 0) {
barplot(plot_data()$density, names.arg = plot_data()$X,
ylab = "Tilgængelige steder pr. km2", col = "#009CDE", ylim = c(0, max(metrics$density)))
} else {
plot(0, type = "n", axes = FALSE, xlab = "", ylab = "")
}
})
}
shinyApp(ui, server)
GET https://api.dataforsyningen.dk/DAGI_10MULTIGEOM_GMLSFP_DAF?service=WFS&request=GetCapabilities&token=8fdc7553a1e8adc188ecd830dfb7f7c4 HTTP/1.1
library(httr)
# Define the URL with your token
url <- "https://api.dataforsyningen.dk/DAGI_10MULTIGEOM_GMLSFP_DAF?service=WFS&request=GetCapabilities&token=8fdc7553a1e8adc188ecd830dfb7f7c4"
# Make a GET request
response <- GET(url, accept("application/json"))
# Check if the request was successful
if (status_code(response) == 200) {
# Parse the JSON response
data <- content(response, "parsed")
# Now you can work with the data
print(data)
} else {
# Print error message if request failed
print("Error: Failed to retrieve data")
}
View(data)
xml_child(data, 1)
View(response)
# Parse the XML document
doc <- xml2::read_xml(response)
library(xml2)
# Parse the XML document
doc <- xml2::read_xml(response)
# Extract the data you need
# For example, to extract the Title from ServiceIdentification
all <- xml2::xml_text(xml2::xml_find_all(doc))
# Print the extracted data
print(all)
# Make a GET request
response <- GET(url)
# Check if the request was successful
if (status_code(response) == 200) {
# Parse the JSON response
data <- content(response, "parsed")
# Now you can work with the data
print(data)
} else {
# Print error message if request failed
print("Error: Failed to retrieve data")
}
# Parse the XML document
doc <- xml2::read_xml(response)
# Extract the data you need
# For example, to extract the Title from ServiceIdentification
all <- xml2::xml_text(xml2::xml_find_all(doc))
# Print the extracted data
print(all)
View(response)
data <- xmlParse(response)
xml_data <- xmlToList(data)
xml_data <- xmlToList(data)
library(XML)
data <- xmlParse(response)
xml_data <- xmlToList(data)
View(xml_data)
View(xml_data)
print(xml_data)
# Make a GET request
response <- GET(url, query="json")
# Make a GET request
response <- GET(url, query=list(outputFormat="json")
# Check if the request was successful
if (status_code(response) == 200) {
# Check if the request was successful
if (status_code(response) == 200) {
# Parse the JSON response
data <- content(response, "parsed")
# Now you can work with the data
print(data)
} else {
# Print error message if request failed
print("Error: Failed to retrieve data")
}
# Make a GET request
response <- GET(url, query=list(outputFormat="json",request="POSTNUMMERINDDELING"))
# Make a GET request
response <- GET(url, query=list(request="POSTNUMMERINDDELING"))
# Check if the request was successful
if (status_code(response) == 200) {
# Parse the JSON response
data <- content(response, "parsed")
# Now you can work with the data
print(data)
} else {
# Print error message if request failed
print("Error: Failed to retrieve data")
}
library(sf)
library(xml12)
library(xml2)
