} else {
ggplot() +
theme_void() # Create an empty plot with no axes
}
})
}
shinyApp(ui, server)
ui <- fluidPage(
theme = bslib::bs_theme(bootswatch = "zephyr"),
tags$head(
# Include FontAwesome library
tags$link(rel = "stylesheet", href = "https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css")
),
tags$head(
tags$style(HTML("
.nav .nav-item .nav-link {
padding-left: 20px;
padding-right: 20px;
text-align: center;
width: 200px;  /* Adjust the width as needed */
}
")),
tags$head(
tags$style(HTML("
.navbar-nav {
display: flex;
justify-content: center;
align-items: center;
margin-left: -100px;
}
"))
),
),
navbarPage("Accessible Cities", id="nav",
tabPanel("  Udforsk  ",
fluidPage(
tags$style(type = "text/css", "#map {height: calc(100vh - 100px) !important;}",),
fluidRow(
# Column with map
column(9,leafletOutput(outputId = "map")),
column(3,
h5("Tilgængelige steder i:", style = "font-weight: bold;"),
actionButton("aar", "Århus"),
actionButton("cph", "København"),
tags$div(style = "height: 10px;"),
p("Find kørestolstilgængelige steder ved at udforske på kortet eller brug søgeværktøjerne"),
hr(),
selectInput("amenity", label = "Find tilgængelige steder i denne kategori", choices = categories),
hr(),
div(style = "display: flex; justify-content: center; gap: 10px;",
textInput("place", label = "Søg på en addresse og find ud af om stedet er tilgængeligt med kørestol",
placeholder = "Indtast en addresse eller et navn på et sted"),
actionButton("action", "søg", style="height:30px;")
)
)))),
tabPanel("Sammenlign",
fluidRow(
h5("Vælg byer og sammenlign deres tilgængelighed", style = "font-weight: bold; text-align:center;"),
p("Her kan du udforske vores sammenligningsværktøj, der sammenligner byers tilgængelighed på baggrund af tre mål: gennemsnitlig afstand mellem tilgængelige lokationer, antal tilgængelige lokationer pr. km2 og andelen af tilgængelige lokationer.", style="text-align:center;"),
div(style = "display: flex; justify-content: center; gap: 10px;",
actionButton("aar2", "   Århus   "),
actionButton("aar3", "   Århus C   "),
actionButton("cph2", "   København   "),
actionButton("ber", "   Berlin   "),
actionButton("bre", "   Bremen   "),
actionButton("ham", "   Hamburg   "),
actionButton("clear", "   Fjern alle   "),
),
tags$div(style = "height: 20px;"),
hr()),
fluidRow(
column(4,
p("Gennemsnitlig afstand",style="text-align:center;"),
HTML("<i class='bi bi-arrow-left-right' style='font-size: 50px; color: #009CDE; text-align: center; display: block;'></i>"),
plotOutput("distance")
),
column(4, p("Andel af tilgængelige steder",style="text-align:center;"),
HTML("<i class='bi bi-pie-chart-fill' style='font-size: 50px; color: #009CDE; text-align: center; display: block;'></i>"),
plotOutput("ratio")
),
column(4, p("Tilgængelige steder pr. km2",style="text-align:center;"),
div(style="text-align:center;",
HTML("<i class='bi bi-geo-fill' style='font-size: 50px; color: #009CDE;'></i>"),
HTML("<i class='bi bi-geo-fill' style='font-size: 50px; color: #009CDE;'></i>"),
HTML("<i class='bi bi-geo-fill' style='font-size: 50px; color: #009CDE;'></i>")),
plotOutput("density"))
))
))
server <- function(input, output, session) {
wheels <- reactiveValues(data = wheel[["aar"]])
observeEvent(input$aar, {
wheels$data <- wheel[["aar"]]
})
observeEvent(input$cph, {
wheels$data <- wheel[["cph"]]
})
output$map <- renderLeaflet({
if (input$amenity=="Vælg"){
wheels_data <- wheels$data
}
else {
wheels_data <- wheels$data
wheels_data_filtered <- dplyr::filter(wheels_data, wheelchair=="yes" & cat_da==input$amenity)
if (nrow(wheels_data_filtered)==0){
shinyalert("Ingen steder fundet", "Der er ingen tilgængelige steder i denne kategori i denne by", type = "info")
}
if (nrow(wheels_data_filtered)>0){
wheels_data<-wheels_data_filtered
}
}
icons <- awesomeIcons(
icon = 'fa-solid fa-wheelchair',
library = 'fa',
markerColor = wheels_data$color,
)
leaflet() %>%
addTiles(group="Base") %>% addProviderTiles("CartoDB.Voyager",group="Base")%>%
addAwesomeMarkers(data=wheels_data, lat=~lat, lng=~lng,
icon=icons, clusterOptions = markerClusterOptions(spiderfyOnMaxZoom=FALSE, disableClusteringAtZoom=17), group="All_markers",
popup=~paste("<div style='text-align:center;'><b>",name,"</b> <br>",oc_formatted,"</div>")) %>%
addLegend(colors = unique(wheels_data$color), labels=unique(wheels_data$label_da), title="Kørestolstilgængelighed <br> for lokationen", opacity=1, group="Base")
#, popup = ~placename)
})
selected_place <- eventReactive(input$action, {
req(input$place)  # Ensure input is available
wheels_data <- wheels$data
wheels_data %>% dplyr::filter(str_detect(name, regex(input$place, ignore_case = TRUE)) |
str_detect(oc_formatted, regex(input$place, ignore_case = TRUE))) ## add address if poss
})
observe({
sel_place <- selected_place()
if (nrow(sel_place) ==1) {
leafletProxy("map") %>%
setView(lng = sel_place$lng, lat = sel_place$lat, zoom = 70)
}
if (nrow(sel_place) > 1) {
iconss <- awesomeIcons(
icon = 'fa-solid fa-wheelchair',
library = 'fa',
markerColor = sel_place$color,
)
#, popup = ~placename)
shinyalert("Flere steder med samme navn","Der er flere steder, med navnet eller adressen, som du indtastede. Vi viser alle stederne, som passer på beskrivelsen.", type="info")
leafletProxy("map") %>% clearGroup("Search_markers")%>% hideGroup("All_markers") %>% addAwesomeMarkers(data=sel_place, lat=~lat, lng=~lng,
icon=iconss, group="Search_markers",
popup=~paste("<div style='text-align:center;'><b>",name,"</b> <br>",oc_formatted,"</div>"))
}
if (nrow(sel_place) == 0) {
shinyalert("Intet sted fundet", "Der er intet sted med dette navn/addresse i vores database.", type = "info")
}
})
sel_metrics <- reactiveValues( data=c())
observeEvent(input$aar2, {
sel_metrics$data <- c(sel_metrics$data, "Aarhus")
})
observeEvent(input$aar3, {
sel_metrics$data <- c(sel_metrics$data, "Aarhus C")
})
observeEvent(input$cph2, {
sel_metrics$data <- c(sel_metrics$data, "København")
})
observeEvent(input$ber, {
sel_metrics$data <- c(sel_metrics$data, "Berlin")
})
observeEvent(input$bre, {
sel_metrics$data <- c(sel_metrics$data, "Bremen")
})
observeEvent(input$ham, {
sel_metrics$data <- c(sel_metrics$data, "Hamburg")
})
observeEvent(input$clear, {
sel_metrics$data <- c()
})
plot_data<- reactive({ dplyr::filter(metrics, X %in% sel_metrics$data)})
output$ratio <- renderPlot({
if (nrow(plot_data()) > 0) {
ggplot(data = plot_data(), aes(x = X, y = ratio)) +
geom_bar(stat = "identity", fill = "#009CDE") +
ylab("Andel tilgængelige steder") +
xlab("Område")+
ylim(0, max(metrics$ratio)) +
theme_minimal()+
theme(axis.text.x = element_text(angle = 45, hjust = 1))# Optional: Add a minimal theme for better aesthetics
} else {
ggplot() +
theme_void() # Create an empty plot with no axes
}
})
output$distance <- renderPlot({
if (nrow(plot_data()) > 0) {
ggplot(data = plot_data(), aes(x = X, y = average_distance)) +
geom_bar(stat = "identity", fill = "#009CDE") +
ylab("Gennemsnitlig afstand mellem tilgængelige steder i meter") +
xlab("Område") +
ylim(0, max(metrics$average_distance)) +
theme_minimal()+
theme(axis.text.x = element_text(angle = 45, hjust = 1))# Optional: Add a minimal theme for better aesthetics
} else {
ggplot() +
theme_void() # Create an empty plot with no axes
}
})
output$density <- renderPlot({
if (nrow(plot_data()) > 0) {
ggplot(data = plot_data(), aes(x = X, y = density)) +
geom_bar(stat = "identity", fill = "#009CDE") +
ylab("Tilgængelige steder pr. km2") +
xlab("Område") +
ylim(0, max(metrics$density)) +
theme_minimal()+
theme(axis.text.x = element_text(angle = 45, hjust = 1))# Optional: Add a minimal theme for better aesthetics
} else {
ggplot() +
theme_void() # Create an empty plot with no axes
}
})
}
shinyApp(ui, server)
ui <- fluidPage(
theme = bslib::bs_theme(bootswatch = "zephyr"),
tags$head(
# Include FontAwesome library
tags$link(rel = "stylesheet", href = "https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css")
),
tags$head(
tags$style(HTML("
.nav .nav-item .nav-link {
padding-left: 20px;
padding-right: 20px;
text-align: center;
width: 200px;  /* Adjust the width as needed */
}
")),
tags$head(
tags$style(HTML("
.navbar-nav {
display: flex;
justify-content: center;
align-items: center;
margin-left: -100px;
}
"))
),
),
navbarPage("Accessible Cities", id="nav",
tabPanel("  Udforsk  ",
fluidPage(
tags$style(type = "text/css", "#map {height: calc(100vh - 100px) !important;}",),
fluidRow(
# Column with map
column(9,leafletOutput(outputId = "map")),
column(3,
h5("Tilgængelige steder i:", style = "font-weight: bold;"),
actionButton("aar", "Århus"),
actionButton("cph", "København"),
tags$div(style = "height: 10px;"),
p("Find kørestolstilgængelige steder ved at udforske på kortet eller brug søgeværktøjerne"),
hr(),
selectInput("amenity", label = "Find tilgængelige steder i denne kategori", choices = categories),
hr(),
p("Søg på en addresse og find ud af om stedet er tilgængeligt med kørestol"),
div(style = "display: flex; justify-content: center; gap: 10px;",
textInput("place",
placeholder = "Indtast en addresse eller et navn på et sted"),
actionButton("action", "søg")
)
)))),
tabPanel("Sammenlign",
fluidRow(
h5("Vælg byer og sammenlign deres tilgængelighed", style = "font-weight: bold; text-align:center;"),
p("Her kan du udforske vores sammenligningsværktøj, der sammenligner byers tilgængelighed på baggrund af tre mål: gennemsnitlig afstand mellem tilgængelige lokationer, antal tilgængelige lokationer pr. km2 og andelen af tilgængelige lokationer.", style="text-align:center;"),
div(style = "display: flex; justify-content: center; gap: 10px;",
actionButton("aar2", "   Århus   "),
actionButton("aar3", "   Århus C   "),
actionButton("cph2", "   København   "),
actionButton("ber", "   Berlin   "),
actionButton("bre", "   Bremen   "),
actionButton("ham", "   Hamburg   "),
actionButton("clear", "   Fjern alle   "),
),
tags$div(style = "height: 20px;"),
hr()),
fluidRow(
column(4,
p("Gennemsnitlig afstand",style="text-align:center;"),
HTML("<i class='bi bi-arrow-left-right' style='font-size: 50px; color: #009CDE; text-align: center; display: block;'></i>"),
plotOutput("distance")
),
column(4, p("Andel af tilgængelige steder",style="text-align:center;"),
HTML("<i class='bi bi-pie-chart-fill' style='font-size: 50px; color: #009CDE; text-align: center; display: block;'></i>"),
plotOutput("ratio")
),
column(4, p("Tilgængelige steder pr. km2",style="text-align:center;"),
div(style="text-align:center;",
HTML("<i class='bi bi-geo-fill' style='font-size: 50px; color: #009CDE;'></i>"),
HTML("<i class='bi bi-geo-fill' style='font-size: 50px; color: #009CDE;'></i>"),
HTML("<i class='bi bi-geo-fill' style='font-size: 50px; color: #009CDE;'></i>")),
plotOutput("density"))
))
))
ui <- fluidPage(
theme = bslib::bs_theme(bootswatch = "zephyr"),
tags$head(
# Include FontAwesome library
tags$link(rel = "stylesheet", href = "https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css")
),
tags$head(
tags$style(HTML("
.nav .nav-item .nav-link {
padding-left: 20px;
padding-right: 20px;
text-align: center;
width: 200px;  /* Adjust the width as needed */
}
")),
tags$head(
tags$style(HTML("
.navbar-nav {
display: flex;
justify-content: center;
align-items: center;
margin-left: -100px;
}
"))
),
),
navbarPage("Accessible Cities", id="nav",
tabPanel("  Udforsk  ",
fluidPage(
tags$style(type = "text/css", "#map {height: calc(100vh - 100px) !important;}",),
fluidRow(
# Column with map
column(9,leafletOutput(outputId = "map")),
column(3,
h5("Tilgængelige steder i:", style = "font-weight: bold;"),
actionButton("aar", "Århus"),
actionButton("cph", "København"),
tags$div(style = "height: 10px;"),
p("Find kørestolstilgængelige steder ved at udforske på kortet eller brug søgeværktøjerne"),
hr(),
selectInput("amenity", label = "Find tilgængelige steder i denne kategori", choices = categories),
hr(),
p("Søg på en addresse og find ud af om stedet er tilgængeligt med kørestol"),
div(style = "display: flex; justify-content: center; gap: 10px;",
textInput("place", label="",
placeholder = "Indtast en addresse eller et navn på et sted"),
actionButton("action", "søg")
)
)))),
tabPanel("Sammenlign",
fluidRow(
h5("Vælg byer og sammenlign deres tilgængelighed", style = "font-weight: bold; text-align:center;"),
p("Her kan du udforske vores sammenligningsværktøj, der sammenligner byers tilgængelighed på baggrund af tre mål: gennemsnitlig afstand mellem tilgængelige lokationer, antal tilgængelige lokationer pr. km2 og andelen af tilgængelige lokationer.", style="text-align:center;"),
div(style = "display: flex; justify-content: center; gap: 10px;",
actionButton("aar2", "   Århus   "),
actionButton("aar3", "   Århus C   "),
actionButton("cph2", "   København   "),
actionButton("ber", "   Berlin   "),
actionButton("bre", "   Bremen   "),
actionButton("ham", "   Hamburg   "),
actionButton("clear", "   Fjern alle   "),
),
tags$div(style = "height: 20px;"),
hr()),
fluidRow(
column(4,
p("Gennemsnitlig afstand",style="text-align:center;"),
HTML("<i class='bi bi-arrow-left-right' style='font-size: 50px; color: #009CDE; text-align: center; display: block;'></i>"),
plotOutput("distance")
),
column(4, p("Andel af tilgængelige steder",style="text-align:center;"),
HTML("<i class='bi bi-pie-chart-fill' style='font-size: 50px; color: #009CDE; text-align: center; display: block;'></i>"),
plotOutput("ratio")
),
column(4, p("Tilgængelige steder pr. km2",style="text-align:center;"),
div(style="text-align:center;",
HTML("<i class='bi bi-geo-fill' style='font-size: 50px; color: #009CDE;'></i>"),
HTML("<i class='bi bi-geo-fill' style='font-size: 50px; color: #009CDE;'></i>"),
HTML("<i class='bi bi-geo-fill' style='font-size: 50px; color: #009CDE;'></i>")),
plotOutput("density"))
))
))
server <- function(input, output, session) {
wheels <- reactiveValues(data = wheel[["aar"]])
observeEvent(input$aar, {
wheels$data <- wheel[["aar"]]
})
observeEvent(input$cph, {
wheels$data <- wheel[["cph"]]
})
output$map <- renderLeaflet({
if (input$amenity=="Vælg"){
wheels_data <- wheels$data
}
else {
wheels_data <- wheels$data
wheels_data_filtered <- dplyr::filter(wheels_data, wheelchair=="yes" & cat_da==input$amenity)
if (nrow(wheels_data_filtered)==0){
shinyalert("Ingen steder fundet", "Der er ingen tilgængelige steder i denne kategori i denne by", type = "info")
}
if (nrow(wheels_data_filtered)>0){
wheels_data<-wheels_data_filtered
}
}
icons <- awesomeIcons(
icon = 'fa-solid fa-wheelchair',
library = 'fa',
markerColor = wheels_data$color,
)
leaflet() %>%
addTiles(group="Base") %>% addProviderTiles("CartoDB.Voyager",group="Base")%>%
addAwesomeMarkers(data=wheels_data, lat=~lat, lng=~lng,
icon=icons, clusterOptions = markerClusterOptions(spiderfyOnMaxZoom=FALSE, disableClusteringAtZoom=17), group="All_markers",
popup=~paste("<div style='text-align:center;'><b>",name,"</b> <br>",oc_formatted,"</div>")) %>%
addLegend(colors = unique(wheels_data$color), labels=unique(wheels_data$label_da), title="Kørestolstilgængelighed <br> for lokationen", opacity=1, group="Base")
#, popup = ~placename)
})
selected_place <- eventReactive(input$action, {
req(input$place)  # Ensure input is available
wheels_data <- wheels$data
wheels_data %>% dplyr::filter(str_detect(name, regex(input$place, ignore_case = TRUE)) |
str_detect(oc_formatted, regex(input$place, ignore_case = TRUE))) ## add address if poss
})
observe({
sel_place <- selected_place()
if (nrow(sel_place) ==1) {
leafletProxy("map") %>%
setView(lng = sel_place$lng, lat = sel_place$lat, zoom = 70)
}
if (nrow(sel_place) > 1) {
iconss <- awesomeIcons(
icon = 'fa-solid fa-wheelchair',
library = 'fa',
markerColor = sel_place$color,
)
#, popup = ~placename)
shinyalert("Flere steder med samme navn","Der er flere steder, med navnet eller adressen, som du indtastede. Vi viser alle stederne, som passer på beskrivelsen.", type="info")
leafletProxy("map") %>% clearGroup("Search_markers")%>% hideGroup("All_markers") %>% addAwesomeMarkers(data=sel_place, lat=~lat, lng=~lng,
icon=iconss, group="Search_markers",
popup=~paste("<div style='text-align:center;'><b>",name,"</b> <br>",oc_formatted,"</div>"))
}
if (nrow(sel_place) == 0) {
shinyalert("Intet sted fundet", "Der er intet sted med dette navn/addresse i vores database.", type = "info")
}
})
sel_metrics <- reactiveValues( data=c())
observeEvent(input$aar2, {
sel_metrics$data <- c(sel_metrics$data, "Aarhus")
})
observeEvent(input$aar3, {
sel_metrics$data <- c(sel_metrics$data, "Aarhus C")
})
observeEvent(input$cph2, {
sel_metrics$data <- c(sel_metrics$data, "København")
})
observeEvent(input$ber, {
sel_metrics$data <- c(sel_metrics$data, "Berlin")
})
observeEvent(input$bre, {
sel_metrics$data <- c(sel_metrics$data, "Bremen")
})
observeEvent(input$ham, {
sel_metrics$data <- c(sel_metrics$data, "Hamburg")
})
observeEvent(input$clear, {
sel_metrics$data <- c()
})
plot_data<- reactive({ dplyr::filter(metrics, X %in% sel_metrics$data)})
output$ratio <- renderPlot({
if (nrow(plot_data()) > 0) {
ggplot(data = plot_data(), aes(x = X, y = ratio)) +
geom_bar(stat = "identity", fill = "#009CDE") +
ylab("Andel tilgængelige steder") +
xlab("Område")+
ylim(0, max(metrics$ratio)) +
theme_minimal()+
theme(axis.text.x = element_text(angle = 45, hjust = 1))# Optional: Add a minimal theme for better aesthetics
} else {
ggplot() +
theme_void() # Create an empty plot with no axes
}
})
output$distance <- renderPlot({
if (nrow(plot_data()) > 0) {
ggplot(data = plot_data(), aes(x = X, y = average_distance)) +
geom_bar(stat = "identity", fill = "#009CDE") +
ylab("Gennemsnitlig afstand mellem tilgængelige steder i meter") +
xlab("Område") +
ylim(0, max(metrics$average_distance)) +
theme_minimal()+
theme(axis.text.x = element_text(angle = 45, hjust = 1))# Optional: Add a minimal theme for better aesthetics
} else {
ggplot() +
theme_void() # Create an empty plot with no axes
}
})
output$density <- renderPlot({
if (nrow(plot_data()) > 0) {
ggplot(data = plot_data(), aes(x = X, y = density)) +
geom_bar(stat = "identity", fill = "#009CDE") +
ylab("Tilgængelige steder pr. km2") +
xlab("Område") +
ylim(0, max(metrics$density)) +
theme_minimal()+
theme(axis.text.x = element_text(angle = 45, hjust = 1))# Optional: Add a minimal theme for better aesthetics
} else {
ggplot() +
theme_void() # Create an empty plot with no axes
}
})
}
shinyApp(ui, server)
