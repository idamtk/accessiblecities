margin-left: -100px;
}
"))
),
),
navbarPage("Accessible Cities", id="nav",
tabPanel("  Udforsk  ",
fluidPage(
tags$style(type = "text/css", "#map {height: calc(100vh - 100px) !important;}",),
fluidRow(
# Column with map
column(8,leafletOutput(outputId = "map")),
column(4,
h5("Vælg en by", style = "font-weight: bold;"),
actionButton("aar", "Århus"),
actionButton("cph", "København"),
hr(),
textInput("place", label = "Indtast sted",
placeholder = "Indtast en addresse eller et navn på et sted"),
actionButton("action", "Søg"),
hr(),
selectInput("amenity", label = "Kategori", choices = categories),
)))),
tabPanel("Sammenlign",
fluidRow(
h5("Vælg en eller/flere byer", style = "font-weight: bold;"),
p("Her kan du udforske vores sammenligningsværktøj, der sammenligner byers tilgængelighed på baggrund af tre mål: gennemsnitlig afstand mellem tilgængelige lokationer, antal tilgængelige lokationer pr. km2 og andelen af tilgængelige lokationer.", style="text-align:center;"),
div(style = "display: flex; justify-content: center; gap: 10px;",
actionButton("aar2", "   Århus   "),
actionButton("cph2", "   København   "),
),
hr()),
fluidRow(
column(4,
p("Average Distance",style="text-align:center;"),
HTML("<i class='bi bi-arrow-left-right' style='font-size: 50px; color: #009CDE; text-align: center; display: block;'></i>")),
column(4, p("Ratio",style="text-align:center;"),
HTML("<i class='bi bi-pie-chart-fill' style='font-size: 50px; color: #009CDE; text-align: center; display: block;'></i>")),
column(4, p("Density",style="text-align:center;"),
div(style="text-align:center;",
HTML("<i class='bi bi-geo-fill' style='font-size: 50px; color: #009CDE;'></i>"),
HTML("<i class='bi bi-geo-fill' style='font-size: 50px; color: #009CDE;'></i>"),
HTML("<i class='bi bi-geo-fill' style='font-size: 50px; color: #009CDE;'></i>")))
))
))
server <- function(input, output, session) {
wheels <- reactiveValues(data = wheel[["aar"]])
observeEvent(input$aar, {
wheels$data <- wheel[["aar"]]
})
observeEvent(input$cph, {
wheels$data <- wheel[["cph"]]
})
output$map <- renderLeaflet({
if (input$amenity=="All"){
wheels_data <- wheels$data
}
else {
wheels_data <- wheels$data
wheels_data_filtered <- dplyr::filter(wheels_data, wheelchair=="yes" & amenity==input$amenity)
if (nrow(wheels_data_filtered)==0){
shinyalert("No data available!", "There are no accessible locations in this category", type = "error")
}
if (nrow(wheels_data_filtered)>0){
wheels_data<-wheels_data_filtered
}
}
leaflet() %>%
addTiles() %>% addProviderTiles("CartoDB.Voyager")%>%
addAwesomeMarkers(data=wheels_data, lat=~lat, lng=~lng,
icon=~icon, clusterOptions = markerClusterOptions(spiderfyOnMaxZoom=FALSE, disableClusteringAtZoom=17),
popup=~paste("<div style='text-align:center;'><b>",name,"</b> <br>",oc_formatted,"</div>"))
#, popup = ~placename)
})
selected_place <- reactive({
req(input$place)  # Ensure input is available
wheels_data <- wheels$data
wheels_data %>% dplyr::filter(name == input$place) ## add address if poss
})
observe({
sel_place <- selected_place()
if (nrow(sel_place) ==1) {
leafletProxy("map") %>%
setView(lng = sel_place$lng, lat = sel_place$lat, zoom = 50)
}
if (nrow(sel_place) > 1) {
result <- sel_place[1,]
leafletProxy("map") %>%
setView(lng = result$lng, lat = result$lat, zoom = 50)
}
if (is.null(sel_place)) {
shinyalert("No data available!", "There are no accessible locations in this category in this city", type = "error")
}
})
}
shinyApp(ui, server)
customIcon <- function(color) {
icon <- makeAwesomeIcon(
icon = 'fa-wheelchair',
library = 'fa',
markerColor = 'white',  # This will be overridden by CSS
iconColor = 'black'     # This will be overridden by CSS
)
icon$iconUrl <- paste0(
'data:image/svg+xml;base64,',
base64enc::base64encode(charToRaw(
paste0(
'<svg xmlns="http://www.w3.org/2000/svg"
viewBox="0 0 448 512">
<!--!Font Awesome Free 6.5.2 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2024 Fonticons, Inc.-->
<path
fill=color
d="M320 48a48 48 0 1 1 96 0 48 48 0 1 1 -96 0zM204.5 121.3c-5.4-2.5-11.7-1.9-16.4 1.7l-40.9 30.7c-14.1 10.6-34.2 7.7-44.8-6.4s-7.7-34.2 6.4-44.8l40.9-30.7c23.7-17.8 55.3-21 82.1-8.4l90.4 42.5c29.1 13.7 36.8 51.6 15.2 75.5L299.1 224h97.4c30.3 0 53 27.7 47.1 57.4L415.4 422.3c-3.5 17.3-20.3 28.6-37.7 25.1s-28.6-20.3-25.1-37.7L377 288H306.7c8.6 19.6 13.3 41.2 13.3 64c0 88.4-71.6 160-160 160S0 440.4 0 352s71.6-160 160-160c11.1 0 22 1.1 32.4 3.3l54.2-54.2-42.1-19.8zM160 448a96 96 0 1 0 0-192 96 96 0 1 0 0 192z"/></svg>'
)
))
)
icon
}
# Create custom icons for each row in the data frame
wheels_data_aar$icon <- lapply(wheels_data_aar$color, customIcon)
wheels_data_cph$icon <- lapply(wheels_data_cph$color, customIcon)
ui <- fluidPage(
theme = bslib::bs_theme(bootswatch = "zephyr"),
tags$head(
# Include FontAwesome library
tags$link(rel = "stylesheet", href = "https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css")
),
tags$head(
tags$style(HTML("
.nav .nav-item .nav-link {
padding-left: 20px;
padding-right: 20px;
text-align: center;
width: 200px;  /* Adjust the width as needed */
}
")),
tags$head(
tags$style(HTML("
.navbar-nav {
display: flex;
justify-content: center;
align-items: center;
margin-left: -100px;
}
"))
),
),
navbarPage("Accessible Cities", id="nav",
tabPanel("  Udforsk  ",
fluidPage(
tags$style(type = "text/css", "#map {height: calc(100vh - 100px) !important;}",),
fluidRow(
# Column with map
column(8,leafletOutput(outputId = "map")),
column(4,
h5("Vælg en by", style = "font-weight: bold;"),
actionButton("aar", "Århus"),
actionButton("cph", "København"),
hr(),
textInput("place", label = "Indtast sted",
placeholder = "Indtast en addresse eller et navn på et sted"),
actionButton("action", "Søg"),
hr(),
selectInput("amenity", label = "Kategori", choices = categories),
)))),
tabPanel("Sammenlign",
fluidRow(
h5("Vælg en eller/flere byer", style = "font-weight: bold;"),
p("Her kan du udforske vores sammenligningsværktøj, der sammenligner byers tilgængelighed på baggrund af tre mål: gennemsnitlig afstand mellem tilgængelige lokationer, antal tilgængelige lokationer pr. km2 og andelen af tilgængelige lokationer.", style="text-align:center;"),
div(style = "display: flex; justify-content: center; gap: 10px;",
actionButton("aar2", "   Århus   "),
actionButton("cph2", "   København   "),
),
hr()),
fluidRow(
column(4,
p("Average Distance",style="text-align:center;"),
HTML("<i class='bi bi-arrow-left-right' style='font-size: 50px; color: #009CDE; text-align: center; display: block;'></i>")),
column(4, p("Ratio",style="text-align:center;"),
HTML("<i class='bi bi-pie-chart-fill' style='font-size: 50px; color: #009CDE; text-align: center; display: block;'></i>")),
column(4, p("Density",style="text-align:center;"),
div(style="text-align:center;",
HTML("<i class='bi bi-geo-fill' style='font-size: 50px; color: #009CDE;'></i>"),
HTML("<i class='bi bi-geo-fill' style='font-size: 50px; color: #009CDE;'></i>"),
HTML("<i class='bi bi-geo-fill' style='font-size: 50px; color: #009CDE;'></i>")))
))
))
server <- function(input, output, session) {
wheels <- reactiveValues(data = wheel[["aar"]])
observeEvent(input$aar, {
wheels$data <- wheel[["aar"]]
})
observeEvent(input$cph, {
wheels$data <- wheel[["cph"]]
})
output$map <- renderLeaflet({
if (input$amenity=="All"){
wheels_data <- wheels$data
}
else {
wheels_data <- wheels$data
wheels_data_filtered <- dplyr::filter(wheels_data, wheelchair=="yes" & amenity==input$amenity)
if (nrow(wheels_data_filtered)==0){
shinyalert("No data available!", "There are no accessible locations in this category", type = "error")
}
if (nrow(wheels_data_filtered)>0){
wheels_data<-wheels_data_filtered
}
}
leaflet() %>%
addTiles() %>% addProviderTiles("CartoDB.Voyager")%>%
addAwesomeMarkers(data=wheels_data, lat=~lat, lng=~lng,
icon=~icon, clusterOptions = markerClusterOptions(spiderfyOnMaxZoom=FALSE, disableClusteringAtZoom=17),
popup=~paste("<div style='text-align:center;'><b>",name,"</b> <br>",oc_formatted,"</div>"))
#, popup = ~placename)
})
selected_place <- reactive({
req(input$place)  # Ensure input is available
wheels_data <- wheels$data
wheels_data %>% dplyr::filter(name == input$place) ## add address if poss
})
observe({
sel_place <- selected_place()
if (nrow(sel_place) ==1) {
leafletProxy("map") %>%
setView(lng = sel_place$lng, lat = sel_place$lat, zoom = 50)
}
if (nrow(sel_place) > 1) {
result <- sel_place[1,]
leafletProxy("map") %>%
setView(lng = result$lng, lat = result$lat, zoom = 50)
}
if (is.null(sel_place)) {
shinyalert("No data available!", "There are no accessible locations in this category in this city", type = "error")
}
})
}
shinyApp(ui, server)
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
setwd("~/OneDrive/Skrivebord/Sjette semester/Spatial Analytics/exam/accessibleaarhus/app")
wheels_data_cph <- readr::read_rds("../data_processing/cph_map_data.rds")
wheels_data_aar <- readr::read_rds("../data_processing/aarhus_map_data.rds")
server <- function(input, output, session) {
wheels <- reactiveValues(data = wheel[["aar"]])
observeEvent(input$aar, {
wheels$data <- wheel[["aar"]]
})
observeEvent(input$cph, {
wheels$data <- wheel[["cph"]]
})
output$map <- renderLeaflet({
if (input$amenity=="All"){
wheels_data <- wheels$data
}
else {
wheels_data <- wheels$data
wheels_data_filtered <- dplyr::filter(wheels_data, wheelchair=="yes" & amenity==input$amenity)
if (nrow(wheels_data_filtered)==0){
shinyalert("No data available!", "There are no accessible locations in this category", type = "error")
}
if (nrow(wheels_data_filtered)>0){
wheels_data<-wheels_data_filtered
}
}
icons <- awesomeIcons(
icon = 'fa-solid fa-wheelchair',
library = 'fa',
markerColor = wheels_data$color,
)
leaflet() %>%
addTiles() %>% addProviderTiles("CartoDB.Voyager")%>%
addAwesomeMarkers(data=wheels_data, lat=~lat, lng=~lng,
icon=icons, clusterOptions = markerClusterOptions(spiderfyOnMaxZoom=FALSE, disableClusteringAtZoom=17),
popup=~paste("<div style='text-align:center;'><b>",name,"</b> <br>",oc_formatted,"</div>"))
#, popup = ~placename)
})
selected_place <- reactive({
req(input$place)  # Ensure input is available
wheels_data <- wheels$data
wheels_data %>% dplyr::filter(name == input$place) ## add address if poss
})
observe({
sel_place <- selected_place()
if (nrow(sel_place) ==1) {
leafletProxy("map") %>%
setView(lng = sel_place$lng, lat = sel_place$lat, zoom = 50)
}
if (nrow(sel_place) > 1) {
result <- sel_place[1,]
leafletProxy("map") %>%
setView(lng = result$lng, lat = result$lat, zoom = 50)
}
if (is.null(sel_place)) {
shinyalert("No data available!", "There are no accessible locations in this category in this city", type = "error")
}
})
}
shinyApp(ui, server)
ui <- fluidPage(
theme = bslib::bs_theme(bootswatch = "zephyr"),
tags$head(
# Include FontAwesome library
tags$link(rel = "stylesheet", href = "https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css")
),
tags$head(
tags$style(HTML("
.nav .nav-item .nav-link {
padding-left: 20px;
padding-right: 20px;
text-align: center;
width: 200px;  /* Adjust the width as needed */
}
")),
tags$head(
tags$style(HTML("
.navbar-nav {
display: flex;
justify-content: center;
align-items: center;
margin-left: -100px;
}
"))
),
),
navbarPage("Accessible Cities", id="nav",
tabPanel("  Udforsk  ",
fluidPage(
tags$style(type = "text/css", "#map {height: calc(100vh - 100px) !important;}",),
fluidRow(
# Column with map
column(8,leafletOutput(outputId = "map")),
column(4,
h5("Vælg en by", style = "font-weight: bold;"),
actionButton("aar", "Århus"),
actionButton("cph", "København"),
hr(),
textInput("place", label = "Indtast sted",
placeholder = "Indtast en addresse eller et navn på et sted"),
actionButton("action", "Søg"),
hr(),
selectInput("amenity", label = "Kategori", choices = categories),
)))),
tabPanel("Sammenlign",
fluidRow(
h5("Vælg en eller/flere byer", style = "font-weight: bold;"),
p("Her kan du udforske vores sammenligningsværktøj, der sammenligner byers tilgængelighed på baggrund af tre mål: gennemsnitlig afstand mellem tilgængelige lokationer, antal tilgængelige lokationer pr. km2 og andelen af tilgængelige lokationer.", style="text-align:center;"),
div(style = "display: flex; justify-content: center; gap: 10px;",
actionButton("aar2", "   Århus   "),
actionButton("cph2", "   København   "),
),
hr()),
fluidRow(
column(4,
p("Average Distance",style="text-align:center;"),
HTML("<i class='bi bi-arrow-left-right' style='font-size: 50px; color: #009CDE; text-align: center; display: block;'></i>")),
column(4, p("Ratio",style="text-align:center;"),
HTML("<i class='bi bi-pie-chart-fill' style='font-size: 50px; color: #009CDE; text-align: center; display: block;'></i>")),
column(4, p("Density",style="text-align:center;"),
div(style="text-align:center;",
HTML("<i class='bi bi-geo-fill' style='font-size: 50px; color: #009CDE;'></i>"),
HTML("<i class='bi bi-geo-fill' style='font-size: 50px; color: #009CDE;'></i>"),
HTML("<i class='bi bi-geo-fill' style='font-size: 50px; color: #009CDE;'></i>")))
))
))
wheel <- list(cph=wheels_data_cph,aar=wheels_data_aar)
cat_aar <- unique(wheels_data_aar$amenity)
cat_aar <- cat_aar[-1]
cat_cph <- unique(wheels_data_cph$amenity)
cat_cph[1] <- "All"
categories<-sort(union(cat_aar,cat_cph))
ui <- fluidPage(
theme = bslib::bs_theme(bootswatch = "zephyr"),
tags$head(
# Include FontAwesome library
tags$link(rel = "stylesheet", href = "https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css")
),
tags$head(
tags$style(HTML("
.nav .nav-item .nav-link {
padding-left: 20px;
padding-right: 20px;
text-align: center;
width: 200px;  /* Adjust the width as needed */
}
")),
tags$head(
tags$style(HTML("
.navbar-nav {
display: flex;
justify-content: center;
align-items: center;
margin-left: -100px;
}
"))
),
),
navbarPage("Accessible Cities", id="nav",
tabPanel("  Udforsk  ",
fluidPage(
tags$style(type = "text/css", "#map {height: calc(100vh - 100px) !important;}",),
fluidRow(
# Column with map
column(8,leafletOutput(outputId = "map")),
column(4,
h5("Vælg en by", style = "font-weight: bold;"),
actionButton("aar", "Århus"),
actionButton("cph", "København"),
hr(),
textInput("place", label = "Indtast sted",
placeholder = "Indtast en addresse eller et navn på et sted"),
actionButton("action", "Søg"),
hr(),
selectInput("amenity", label = "Kategori", choices = categories),
)))),
tabPanel("Sammenlign",
fluidRow(
h5("Vælg en eller/flere byer", style = "font-weight: bold;"),
p("Her kan du udforske vores sammenligningsværktøj, der sammenligner byers tilgængelighed på baggrund af tre mål: gennemsnitlig afstand mellem tilgængelige lokationer, antal tilgængelige lokationer pr. km2 og andelen af tilgængelige lokationer.", style="text-align:center;"),
div(style = "display: flex; justify-content: center; gap: 10px;",
actionButton("aar2", "   Århus   "),
actionButton("cph2", "   København   "),
),
hr()),
fluidRow(
column(4,
p("Average Distance",style="text-align:center;"),
HTML("<i class='bi bi-arrow-left-right' style='font-size: 50px; color: #009CDE; text-align: center; display: block;'></i>")),
column(4, p("Ratio",style="text-align:center;"),
HTML("<i class='bi bi-pie-chart-fill' style='font-size: 50px; color: #009CDE; text-align: center; display: block;'></i>")),
column(4, p("Density",style="text-align:center;"),
div(style="text-align:center;",
HTML("<i class='bi bi-geo-fill' style='font-size: 50px; color: #009CDE;'></i>"),
HTML("<i class='bi bi-geo-fill' style='font-size: 50px; color: #009CDE;'></i>"),
HTML("<i class='bi bi-geo-fill' style='font-size: 50px; color: #009CDE;'></i>")))
))
))
server <- function(input, output, session) {
wheels <- reactiveValues(data = wheel[["aar"]])
observeEvent(input$aar, {
wheels$data <- wheel[["aar"]]
})
observeEvent(input$cph, {
wheels$data <- wheel[["cph"]]
})
output$map <- renderLeaflet({
if (input$amenity=="All"){
wheels_data <- wheels$data
}
else {
wheels_data <- wheels$data
wheels_data_filtered <- dplyr::filter(wheels_data, wheelchair=="yes" & amenity==input$amenity)
if (nrow(wheels_data_filtered)==0){
shinyalert("No data available!", "There are no accessible locations in this category", type = "error")
}
if (nrow(wheels_data_filtered)>0){
wheels_data<-wheels_data_filtered
}
}
icons <- awesomeIcons(
icon = 'fa-solid fa-wheelchair',
library = 'fa',
markerColor = wheels_data$color,
)
leaflet() %>%
addTiles() %>% addProviderTiles("CartoDB.Voyager")%>%
addAwesomeMarkers(data=wheels_data, lat=~lat, lng=~lng,
icon=icons, clusterOptions = markerClusterOptions(spiderfyOnMaxZoom=FALSE, disableClusteringAtZoom=17),
popup=~paste("<div style='text-align:center;'><b>",name,"</b> <br>",oc_formatted,"</div>"))
#, popup = ~placename)
})
selected_place <- reactive({
req(input$place)  # Ensure input is available
wheels_data <- wheels$data
wheels_data %>% dplyr::filter(name == input$place) ## add address if poss
})
observe({
sel_place <- selected_place()
if (nrow(sel_place) ==1) {
leafletProxy("map") %>%
setView(lng = sel_place$lng, lat = sel_place$lat, zoom = 50)
}
if (nrow(sel_place) > 1) {
result <- sel_place[1,]
leafletProxy("map") %>%
setView(lng = result$lng, lat = result$lat, zoom = 50)
}
if (is.null(sel_place)) {
shinyalert("No data available!", "There are no accessible locations in this category in this city", type = "error")
}
})
}
shinyApp(ui, server)
wheels_data_cph <- readr::read_rds("cph_wheels.rds")
wheels_data_cph <- readr::read_rds("cph_wheels.rds")
wheels_data_aar <- readr::read_rds("aarhus_wheels.rds")
wheels_data_ber <- readr::read_rds("Berlin_wheels.rds")
wheels_data_ham <- readr::read_rds("Hamburg_wheels.rds")
wheels_data_bre <- readr::read_rds("Bremen_wheels.rds")
aar_poly <- readr::read_rds("aarhus_poly.rds")
cph_poly <- readr::read_rds("cph_poly.rds")
setwd("~/OneDrive/Skrivebord/Sjette semester/Spatial Analytics/exam/accessibleaarhus/data_processing")
wheels_data_ham <- readRDS("~/OneDrive/Skrivebord/Sjette semester/Spatial Analytics/exam/accessibleaarhus/data_processing/Hamburg_wheels.rds")
wheels_data_ham <- readr::read_rds("Hamburg_wheels.rds")
library(tidyverse)
wheels_data_ham <- readr::read_rds("Hamburg_wheels.rds")
