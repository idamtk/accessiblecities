});
};
const props = { placeholder: 'Start typing', underlined: true, onChange };
const element = React.createElement(jsmodule['@fluentui/react'].SearchBox, props);
return element;
}"))
Dropdown.shinyInput(
inputId = id,
multiSelect = TRUE,
placeholder = "Select a place",
options = options_with_search(opt),
...,
onRenderOption = render_search_box
)
}
# UI Function for the module
module_ui <- function(id) {
ns <- NS(id)
tagList(
div(
style = "height: 100%; width: 50%; margin:auto",
SearchableDropdown(
id = ns("place"),
label = "Searchable Place Selector",
opt = generate_options(wheels[[1]]) # Initial options, can be dynamically updated
),
selectInput(ns("dataset"), label = "Dataset", choices = names(wheels)),
textOutput(ns("selected"))
)
)
}
# Server Function for the module
module_server <- function(id) {
moduleServer(id, function(input, output, session) {
observeEvent(input$place, {
print(input$place)
output$selected <- renderText({
paste("Selected place:", input$place)
})
})
observeEvent(input$dataset, {
dataset <- wheels[[input$dataset]]
new_options <- generate_options(dataset)
updateSelectizeInput(session, "place", choices = new_options)
})
})
}
# Main UI function
ui <- function() {
fluidPage(
module_ui("searchableDropdown")
)
}
# Main Server function
server <- function(input, output, session) {
module_server("searchableDropdown")
}
shinyApp(ui = ui, server = server)
library(shiny)
library(shiny.fluent)
library(dplyr)
library(stringr)
# Assuming wheels_data_cph and wheels_data_aar are already loaded
# wheels_data_cph <- readr::read_rds("../data_processing/cph_map_data.rds")
# wheels_data_aar <- readr::read_rds("../data_processing/aarhus_map_data.rds")
wheels <- list(chp = wheels_data_cph, aar = wheels_data_aar)
amenities <- c("All", "parking", "restaurant")
# Utility function to generate dropdown options
generate_options <- function(data) {
unique_places <- unique(data$oc_formatted)
options <- lapply(unique_places, function(place) {
list(key = place, text = place)
})
return(options)
}
# Function to add a filter header in dropdown options
options_with_search <- function(opt) {
filter_header <- list(
key = "__FilterHeader__",
text = "-",
itemType = DropdownMenuItemType("Header")
)
append(list(filter_header), opt)
}
# Define the searchable dropdown function
SearchableDropdown <- function(id, opt, ...) {
render_search_box <- JS(paste0("(option) => {
if (option.key !== '__FilterHeader__') {
return option.text;
}
const onChange = (event, newValue) => {
const query = newValue.toLocaleLowerCase();
const checkboxLabels = document.querySelectorAll(
'#", id, "-list .ms-Checkbox-label'
);
checkboxLabels.forEach(label => {
const text = label.innerText.replace('\\n', '').replace('', '').toLocaleLowerCase();
if (query === '' || text.startsWith(query)) {
label.parentElement.style.display = 'flex';
} else {
label.parentElement.style.display = 'none';
}
});
};
const props = { placeholder: 'Start typing', underlined: true, onChange };
const element = React.createElement(jsmodule['@fluentui/react'].SearchBox, props);
return element;
}"))
Dropdown.shinyInput(
inputId = id,
multiSelect = TRUE,
placeholder = "Select a place",
options = options_with_search(opt),  # Use the function here
...,
onRenderOption = render_search_box
)
}
# UI Function for the module
module_ui <- function(id) {
ns <- NS(id)
tagList(
div(
style = "height: 100%; width: 50%; margin:auto",
SearchableDropdown(
id = ns("place"),
label = "Searchable Place Selector",
opt = generate_options(wheels[[1]]) # Initial options, can be dynamically updated
),
selectInput(ns("dataset"), label = "Dataset", choices = names(wheels)),
textOutput(ns("selected"))
)
)
}
# Server Function for the module
module_server <- function(id) {
moduleServer(id, function(input, output, session) {
observeEvent(input$place, {
print(input$place)
output$selected <- renderText({
paste("Selected place:", input$place)
})
})
observeEvent(input$dataset, {
dataset <- wheels[[input$dataset]]
new_options <- generate_options(dataset)
updateSelectizeInput(session, "place", choices = new_options)
})
})
}
# Main UI function
ui <- function() {
fluidPage(
module_ui("searchableDropdown")
)
}
# Main Server function
server <- function(input, output, session) {
module_server("searchableDropdown")
}
shinyApp(ui = ui, server = server)
library(shiny)
library(shiny.fluent)
library(dplyr)
library(stringr)
# Assuming wheels_data_cph and wheels_data_aar are already loaded
# wheels_data_cph <- readr::read_rds("../data_processing/cph_map_data.rds")
# wheels_data_aar <- readr::read_rds("../data_processing/aarhus_map_data.rds")
wheels <- list(chp = wheels_data_cph, aar = wheels_data_aar)
amenities <- c("All", "parking", "restaurant")
# Utility function to generate dropdown options
generate_options <- function(data) {
unique_places <- unique(data$oc_formatted)
options <- lapply(unique_places, function(place) {
list(key = place, text = place)
})
return(options)
}
# Function to add a filter header in dropdown options
options_with_search <- function(opt) {
filter_header <- list(
key = "__FilterHeader__",
text = "-",
itemType = DropdownMenuItemType("Header")
)
append(list(filter_header), opt)
}
# Define the searchable dropdown function
SearchableDropdown <- function(id, opt, ...) {
render_search_box <- JS(paste0("(option) => {
if (option.key !== '__FilterHeader__') {
return option.text;
}
const onChange = (event, newValue) => {
const query = newValue.toLocaleLowerCase();
const checkboxLabels = document.querySelectorAll(
'#", id, "-list .ms-Checkbox-label'
);
checkboxLabels.forEach(label => {
const text = label.innerText.replace('\\n', '').replace('', '').toLocaleLowerCase();
if (query === '' || text.startsWith(query)) {
label.parentElement.style.display = 'flex';
} else {
label.parentElement.style.display = 'none';
}
});
};
const props = { placeholder: 'Start typing', underlined: true, onChange };
const element = React.createElement(jsmodule['@fluentui/react'].SearchBox, props);
return element;
}"))
Dropdown.shinyInput(
inputId = id,
multiSelect = TRUE,
placeholder = "Select a place",
options = options_with_search(opt),  # Use the function here
...,
onRenderOption = render_search_box
)
}
# Define DropdownMenuItemType function
DropdownMenuItemType <- function(type) {
JS(paste0("jsmodule['@fluentui/react'].DropdownMenuItemType."), type)
}
# UI Function for the module
module_ui <- function(id) {
ns <- NS(id)
tagList(
div(
style = "height: 100%; width: 50%; margin:auto",
SearchableDropdown(
id = ns("place"),
label = "Searchable Place Selector",
opt = generate_options(wheels[[1]]) # Initial options, can be dynamically updated
),
selectInput(ns("dataset"), label = "Dataset", choices = names(wheels)),
textOutput(ns("selected"))
)
)
}
# Server Function for the module
module_server <- function(id) {
moduleServer(id, function(input, output, session) {
observeEvent(input$place, {
print(input$place)
output$selected <- renderText({
paste("Selected place:", input$place)
})
})
observeEvent(input$dataset, {
dataset <- wheels[[input$dataset]]
new_options <- generate_options(dataset)
updateSelectizeInput(session, "place", choices = new_options)
})
})
}
# Main UI function
ui <- function() {
fluidPage(
module_ui("searchableDropdown")
)
}
# Main Server function
server <- function(input, output, session) {
module_server("searchableDropdown")
}
shinyApp(ui = ui, server = server)
shinyApp(ui = ui, server = server)
ui <- fluidPage(
navset_card_underline(
nav_panel("Udforsk"
sidebarPanel(
ui <- fluidPage(
navset_card_underline(
nav_panel("Udforsk",
sidebarPanel(textInput("place", label = "place",
placeholder = "Indtast en addresse eller et navn på et sted"),
actionButton("action", "Søg"),
width = 3,
selectInput("dataset", label = "Dataset", choices = names(wheels)),
selectInput("amenity", label = "Amenity", choices = amenities),
),
mainPanel(
leafletOutput(outputId = "map", width = "100%", height = 1000)
)),
nav_panel("Sammenlign",
print("Hvad"))
)
)
server <- function(input, output, session) {
output$map <- renderLeaflet({
if (input$amenity=="All"){
wheels_data <- wheels[[input$dataset]]
} else {
wheels_data <- wheels[[input$dataset]]
wheels_data <- dplyr::filter(wheels_data, wheelchair=="yes" & amenity==input$amenity)
}
leaflet() %>%
addMapboxTiles(style_id = "satellite-streets-v11",
username = "mapbox",
access_token = token)  %>%
addCircleMarkers(data = wheels_data,
lat = ~lat,
lng = ~lng,
color=~color)
#, popup = ~placename)
})
selected_place <- reactive({
req(input$place)  # Ensure input is available
wheels_data <- wheels[[input$dataset]]
result <- wheels_data %>% filter(str_detect(oc_formatted, input$place) | str_detect(name, input$place))
resultt <- result[1,]
})
observe({
sel_place <- selected_place()
if (nrow(sel_place) == 0){
print("Could not find place")
}
if (nrow(sel_place) > 0) {
leafletProxy("map") %>%
setView(lng = sel_place$lng, lat = sel_place$lat, zoom = 50)
}
})
}
shinyApp(ui, server)
wheels_data_cph <- readr::read_rds("../data_processing/cph_map_data.rds")
wheels_data_aar <- readr::read_rds("../data_processing/aarhus_map_data.rds")
wheels <- list(chp=wheels_data_cph,aar=wheels_data_aar)
amenities <- c("All", "parking", "restaurant")
token <- "pk.eyJ1IjoiaWRhbXRrIiwiYSI6ImNsdGUycjB3dTBhbmkyaXJ0bnh4dGt6MGwifQ.rfH9mhRsZwCVuTXz34PiSA"
library(mapview)
library(mapboxapi)
library(shiny)
library(leaflet)
library(sf)
library(ggplot2)
ui <- fluidPage(
navset_card_underline(
nav_panel("Udforsk",
sidebarPanel(textInput("place", label = "place",
placeholder = "Indtast en addresse eller et navn på et sted"),
actionButton("action", "Søg"),
width = 3,
selectInput("dataset", label = "Dataset", choices = names(wheels)),
selectInput("amenity", label = "Amenity", choices = amenities),
),
mainPanel(
leafletOutput(outputId = "map", width = "100%", height = 1000)
)),
nav_panel("Sammenlign",
print("Hvad"))
)
)
install.packages("bslib")
install.packages("bslib")
library(bslib)
library(bslib)
ui <- fluidPage(
navset_card_underline(
nav_panel("Udforsk",
sidebarPanel(textInput("place", label = "place",
placeholder = "Indtast en addresse eller et navn på et sted"),
actionButton("action", "Søg"),
width = 3,
selectInput("dataset", label = "Dataset", choices = names(wheels)),
selectInput("amenity", label = "Amenity", choices = amenities),
),
mainPanel(
leafletOutput(outputId = "map", width = "100%", height = 1000)
)),
nav_panel("Sammenlign",
print("Hvad"))
)
)
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
library(stringr)
wheels_data_cph <- readr::read_rds("../data_processing/cph_map_data.rds")
wheels_data_aar <- readr::read_rds("../data_processing/aarhus_map_data.rds")
wheels <- list(chp=wheels_data_cph,aar=wheels_data_aar)
amenities <- c("All", "parking", "restaurant")
token <- "pk.eyJ1IjoiaWRhbXRrIiwiYSI6ImNsdGUycjB3dTBhbmkyaXJ0bnh4dGt6MGwifQ.rfH9mhRsZwCVuTXz34PiSA"
library(bslib)
library(mapview)
library(mapboxapi)
library(shiny)
library(leaflet)
library(sf)
library(ggplot2)
ui <- fluidPage(
navset_card_underline(
nav_panel("Udforsk",
sidebarPanel(textInput("place", label = "place",
placeholder = "Indtast en addresse eller et navn på et sted"),
actionButton("action", "Søg"),
width = 3,
selectInput("dataset", label = "Dataset", choices = names(wheels)),
selectInput("amenity", label = "Amenity", choices = amenities),
),
mainPanel(
leafletOutput(outputId = "map", width = "100%", height = 1000)
)),
nav_panel("Sammenlign",
print("Hvad"))
)
)
ui <- fluidPage(
navbarPage("Accessible Aarhus", id="nav",
tab_panel("Udforsk",
sidebarPanel(textInput("place", label = "place",
placeholder = "Indtast en addresse eller et navn på et sted"),
actionButton("action", "Søg"),
width = 3,
selectInput("dataset", label = "Dataset", choices = names(wheels)),
selectInput("amenity", label = "Amenity", choices = amenities),
),
mainPanel(
leafletOutput(outputId = "map", width = "100%", height = 1000)
)),
tab_panel("Sammenlign",
print("Hvad"))
)
)
server <- function(input, output, session) {
output$map <- renderLeaflet({
if (input$amenity=="All"){
wheels_data <- wheels[[input$dataset]]
} else {
wheels_data <- wheels[[input$dataset]]
wheels_data <- dplyr::filter(wheels_data, wheelchair=="yes" & amenity==input$amenity)
}
leaflet() %>%
addMapboxTiles(style_id = "satellite-streets-v11",
username = "mapbox",
access_token = token)  %>%
addCircleMarkers(data = wheels_data,
lat = ~lat,
lng = ~lng,
color=~color)
#, popup = ~placename)
})
selected_place <- reactive({
req(input$place)  # Ensure input is available
wheels_data <- wheels[[input$dataset]]
result <- wheels_data %>% filter(str_detect(oc_formatted, input$place) | str_detect(name, input$place))
resultt <- result[1,]
})
observe({
sel_place <- selected_place()
if (nrow(sel_place) == 0){
print("Could not find place")
}
if (nrow(sel_place) > 0) {
leafletProxy("map") %>%
setView(lng = sel_place$lng, lat = sel_place$lat, zoom = 50)
}
})
}
shinyApp(ui, server)
ui <- fluidPage(
navbarPage("Accessible Aarhus", id="nav",
tab_panel("Udforsk",
sidebarPanel(textInput("place", label = "place",
placeholder = "Indtast en addresse eller et navn på et sted"),
actionButton("action", "Søg"),
width = 3,
selectInput("dataset", label = "Dataset", choices = names(wheels)),
selectInput("amenity", label = "Amenity", choices = amenities),
),
mainPanel(
leafletOutput(outputId = "map", width = "100%", height = 1000)
)),
tab_panel("Sammenlign",
print("Hvad"))
)
)
install.packages("htmltools")
install.packages("htmltools")
library(htmltools)
wheels_data_cph <- readr::read_rds("../data_processing/cph_map_data.rds")
wheels_data_aar <- readr::read_rds("../data_processing/aarhus_map_data.rds")
wheels <- list(chp=wheels_data_cph,aar=wheels_data_aar)
amenities <- c("All", "parking", "restaurant")
token <- "pk.eyJ1IjoiaWRhbXRrIiwiYSI6ImNsdGUycjB3dTBhbmkyaXJ0bnh4dGt6MGwifQ.rfH9mhRsZwCVuTXz34PiSA"
library(mapview)
library(mapboxapi)
library(shiny)
library(leaflet)
library(sf)
library(ggplot2)
ui <- fluidPage(
navbarPage("Accessible Aarhus", id="nav",
tab_panel("Udforsk",
sidebarPanel(textInput("place", label = "place",
placeholder = "Indtast en addresse eller et navn på et sted"),
actionButton("action", "Søg"),
width = 3,
selectInput("dataset", label = "Dataset", choices = names(wheels)),
selectInput("amenity", label = "Amenity", choices = amenities),
),
mainPanel(
leafletOutput(outputId = "map", width = "100%", height = 1000)
)),
tab_panel("Sammenlign",
print("Hvad"))
)
)
